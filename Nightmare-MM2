-- Gui to Lua
-- Version: 3.2

-- Instances:

local NightmareMM2 = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local ImageLabel = Instance.new("ImageLabel")
local ImageButton = Instance.new("ImageButton")
local trollbtn = Instance.new("TextButton")
local UICorner_2 = Instance.new("UICorner")
local combatbtn = Instance.new("TextButton")
local UICorner_3 = Instance.new("UICorner")
local visualsbtn = Instance.new("TextButton")
local UICorner_4 = Instance.new("UICorner")
local playerbtn = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local homebtn = Instance.new("TextButton")
local UICorner_6 = Instance.new("UICorner")
local name = Instance.new("TextLabel")
local frs = Instance.new("Frame")
local home = Instance.new("Frame")
local player = Instance.new("Frame")
local ScrollFrame = Instance.new("ScrollingFrame")
local UIPadding = Instance.new("UIPadding")
local ToggleTest = Instance.new("Frame")
local UICorner_7 = Instance.new("UICorner")
local Frame1 = Instance.new("Frame")
local UICorner_8 = Instance.new("UICorner")
local Toggle = Instance.new("TextButton")
local UICorner_9 = Instance.new("UICorner")
local TextLabel = Instance.new("TextLabel")
local UIGridLayout = Instance.new("UIGridLayout")
local ESP = Instance.new("Frame")
local UICorner_10 = Instance.new("UICorner")
local TextLabel_2 = Instance.new("TextLabel")
local TextButton = Instance.new("TextButton")
local UICorner_11 = Instance.new("UICorner")
local visuals = Instance.new("Frame")
local ScrollFrame_2 = Instance.new("ScrollingFrame")
local UIPadding_2 = Instance.new("UIPadding")
local ToggleTest_2 = Instance.new("Frame")
local UICorner_12 = Instance.new("UICorner")
local Frame1_2 = Instance.new("Frame")
local UICorner_13 = Instance.new("UICorner")
local Toggle_2 = Instance.new("TextButton")
local UICorner_14 = Instance.new("UICorner")
local TextLabel_3 = Instance.new("TextLabel")
local UIGridLayout_2 = Instance.new("UIGridLayout")
local ESP_2 = Instance.new("Frame")
local UICorner_15 = Instance.new("UICorner")
local TextLabel_4 = Instance.new("TextLabel")
local TextButton_2 = Instance.new("TextButton")
local UICorner_16 = Instance.new("UICorner")
local combat = Instance.new("Frame")
local ScrollFrame_3 = Instance.new("ScrollingFrame")
local UIPadding_3 = Instance.new("UIPadding")
local ToggleTest_3 = Instance.new("Frame")
local UICorner_17 = Instance.new("UICorner")
local Frame1_3 = Instance.new("Frame")
local UICorner_18 = Instance.new("UICorner")
local Toggle_3 = Instance.new("TextButton")
local UICorner_19 = Instance.new("UICorner")
local TextLabel_5 = Instance.new("TextLabel")
local UIGridLayout_3 = Instance.new("UIGridLayout")
local ESP_3 = Instance.new("Frame")
local UICorner_20 = Instance.new("UICorner")
local TextLabel_6 = Instance.new("TextLabel")
local TextButton_3 = Instance.new("TextButton")
local UICorner_21 = Instance.new("UICorner")
local troll = Instance.new("Frame")
local ScrollFrame_4 = Instance.new("ScrollingFrame")
local UIPadding_4 = Instance.new("UIPadding")
local ToggleTest_4 = Instance.new("Frame")
local UICorner_22 = Instance.new("UICorner")
local Frame1_4 = Instance.new("Frame")
local UICorner_23 = Instance.new("UICorner")
local Toggle_4 = Instance.new("TextButton")
local UICorner_24 = Instance.new("UICorner")
local TextLabel_7 = Instance.new("TextLabel")
local UIGridLayout_4 = Instance.new("UIGridLayout")
local ESP_4 = Instance.new("Frame")
local UICorner_25 = Instance.new("UICorner")
local TextLabel_8 = Instance.new("TextLabel")
local TextButton_4 = Instance.new("TextButton")
local UICorner_26 = Instance.new("UICorner")

--Properties:

NightmareMM2.Name = "NightmareMM2"
NightmareMM2.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
NightmareMM2.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

MainFrame.Name = "MainFrame"
MainFrame.Parent = NightmareMM2
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
MainFrame.BorderSizePixel = 0
MainFrame.Position = UDim2.new(0.217434868, 0, 0.209621996, 0)
MainFrame.Size = UDim2.new(0, 783, 0, 567)
MainFrame.ZIndex = 0

UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = MainFrame

ImageLabel.Parent = MainFrame
ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageLabel.BackgroundTransparency = 1.000
ImageLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
ImageLabel.BorderSizePixel = 0
ImageLabel.Position = UDim2.new(-0.0395913161, 0, -0.0458553806, 0)
ImageLabel.Size = UDim2.new(0, 845, 0, 619)
ImageLabel.Image = "rbxassetid://88371589772027"

ImageButton.Parent = MainFrame
ImageButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ImageButton.BackgroundTransparency = 1.000
ImageButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
ImageButton.BorderSizePixel = 0
ImageButton.Position = UDim2.new(0.939624906, 0, -0.00137442129, 0)
ImageButton.Size = UDim2.new(0, 40, 0, 40)
ImageButton.Image = "rbxassetid://89412107668867"

trollbtn.Name = "trollbtn"
trollbtn.Parent = MainFrame
trollbtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
trollbtn.BackgroundTransparency = 0.360
trollbtn.BorderColor3 = Color3.fromRGB(0, 0, 0)
trollbtn.BorderSizePixel = 0
trollbtn.Position = UDim2.new(-0.00989599712, 0, 0.644663095, 0)
trollbtn.Size = UDim2.new(0, 159, 0, 58)
trollbtn.Font = Enum.Font.FredokaOne
trollbtn.Text = "TROLL"
trollbtn.TextColor3 = Color3.fromRGB(255, 255, 255)
trollbtn.TextSize = 25.000

UICorner_2.Parent = trollbtn

combatbtn.Name = "combatbtn"
combatbtn.Parent = MainFrame
combatbtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
combatbtn.BackgroundTransparency = 0.360
combatbtn.BorderColor3 = Color3.fromRGB(0, 0, 0)
combatbtn.BorderSizePixel = 0
combatbtn.Position = UDim2.new(-0.00989599712, 0, 0.520826638, 0)
combatbtn.Size = UDim2.new(0, 159, 0, 58)
combatbtn.Font = Enum.Font.FredokaOne
combatbtn.Text = "COMBAT"
combatbtn.TextColor3 = Color3.fromRGB(255, 255, 255)
combatbtn.TextSize = 25.000

UICorner_3.Parent = combatbtn

visualsbtn.Name = "visualsbtn"
visualsbtn.Parent = MainFrame
visualsbtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
visualsbtn.BackgroundTransparency = 0.360
visualsbtn.BorderColor3 = Color3.fromRGB(0, 0, 0)
visualsbtn.BorderSizePixel = 0
visualsbtn.Position = UDim2.new(-0.00989599712, 0, 0.395226955, 0)
visualsbtn.Size = UDim2.new(0, 159, 0, 58)
visualsbtn.Font = Enum.Font.FredokaOne
visualsbtn.Text = "VISUALS"
visualsbtn.TextColor3 = Color3.fromRGB(255, 255, 255)
visualsbtn.TextSize = 25.000

UICorner_4.Parent = visualsbtn

playerbtn.Name = "playerbtn"
playerbtn.Parent = MainFrame
playerbtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
playerbtn.BackgroundTransparency = 0.360
playerbtn.BorderColor3 = Color3.fromRGB(0, 0, 0)
playerbtn.BorderSizePixel = 0
playerbtn.Position = UDim2.new(-0.00989599712, 0, 0.269627064, 0)
playerbtn.Size = UDim2.new(0, 159, 0, 58)
playerbtn.Font = Enum.Font.FredokaOne
playerbtn.Text = "PLAYER"
playerbtn.TextColor3 = Color3.fromRGB(255, 255, 255)
playerbtn.TextSize = 25.000

UICorner_5.Parent = playerbtn

homebtn.Name = "homebtn"
homebtn.Parent = MainFrame
homebtn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
homebtn.BackgroundTransparency = 0.360
homebtn.BorderColor3 = Color3.fromRGB(0, 0, 0)
homebtn.BorderSizePixel = 0
homebtn.Position = UDim2.new(-0.00989595801, 0, 0.146193415, 0)
homebtn.Size = UDim2.new(0, 159, 0, 58)
homebtn.Font = Enum.Font.FredokaOne
homebtn.Text = "HOME"
homebtn.TextColor3 = Color3.fromRGB(255, 255, 255)
homebtn.TextSize = 25.000

UICorner_6.Parent = homebtn

name.Name = "name"
name.Parent = MainFrame
name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
name.BackgroundTransparency = 1.000
name.BorderColor3 = Color3.fromRGB(0, 0, 0)
name.BorderSizePixel = 0
name.Position = UDim2.new(0.16436775, 0, -0.0194003526, 0)
name.Size = UDim2.new(0, 558, 0, 49)
name.Font = Enum.Font.FredokaOne
name.Text = "NIGHTMARE"
name.TextColor3 = Color3.fromRGB(255, 255, 255)
name.TextSize = 42.000

frs.Name = "frs"
frs.Parent = MainFrame
frs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
frs.BackgroundTransparency = 1.000
frs.BorderColor3 = Color3.fromRGB(0, 0, 0)
frs.BorderSizePixel = 0
frs.Position = UDim2.new(0.233716473, 0, 0.0529100522, 0)
frs.Size = UDim2.new(0, 577, 0, 521)

home.Name = "home"
home.Parent = frs
home.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
home.BackgroundTransparency = 1.000
home.BorderColor3 = Color3.fromRGB(0, 0, 0)
home.BorderSizePixel = 0
home.Size = UDim2.new(0, 577, 0, 521)
home.Visible = false

player.Name = "player"
player.Parent = frs
player.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
player.BackgroundTransparency = 1.000
player.BorderColor3 = Color3.fromRGB(0, 0, 0)
player.BorderSizePixel = 0
player.Size = UDim2.new(0, 577, 0, 521)
player.Visible = false

ScrollFrame.Name = "ScrollFrame"
ScrollFrame.Parent = player
ScrollFrame.Active = true
ScrollFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollFrame.BackgroundTransparency = 1.000
ScrollFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollFrame.BorderSizePixel = 0
ScrollFrame.Position = UDim2.new(-0.330586761, 0, 0, 0)
ScrollFrame.Size = UDim2.new(0, 768, 0, 521)

UIPadding.Parent = ScrollFrame
UIPadding.PaddingBottom = UDim.new(0, 10)
UIPadding.PaddingLeft = UDim.new(0, 200)
UIPadding.PaddingRight = UDim.new(0, 10)
UIPadding.PaddingTop = UDim.new(0, 17)

ToggleTest.Name = "ToggleTest"
ToggleTest.Parent = ScrollFrame
ToggleTest.Active = true
ToggleTest.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ToggleTest.BorderColor3 = Color3.fromRGB(0, 0, 0)
ToggleTest.BorderSizePixel = 0
ToggleTest.Position = UDim2.new(-0.149000004, 0, 0.0130000003, 0)
ToggleTest.Size = UDim2.new(0, 127, 0, 125)
ToggleTest.Visible = false
ToggleTest.ZIndex = 0

UICorner_7.CornerRadius = UDim.new(0, 12)
UICorner_7.Parent = ToggleTest

Frame1.Name = "Frame 1"
Frame1.Parent = ToggleTest
Frame1.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Frame1.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame1.BorderSizePixel = 0
Frame1.Position = UDim2.new(0.0654357895, 0, 0.60635072, 0)
Frame1.Size = UDim2.new(0, 83, 0, 33)
Frame1.ZIndex = 0

UICorner_8.CornerRadius = UDim.new(0, 12)
UICorner_8.Parent = Frame1

Toggle.Name = "Toggle"
Toggle.Parent = ToggleTest
Toggle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
Toggle.BorderSizePixel = 0
Toggle.Position = UDim2.new(0.0654370114, 0, 0.60717833, 0)
Toggle.Size = UDim2.new(0, 40, 0, 32)
Toggle.Font = Enum.Font.FredokaOne
Toggle.Text = ""
Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle.TextSize = 25.000

UICorner_9.Parent = Toggle

TextLabel.Parent = ToggleTest
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 0
TextLabel.Size = UDim2.new(0, 100, 0, 50)
TextLabel.Font = Enum.Font.FredokaOne
TextLabel.Text = "ESP"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 25.000

UIGridLayout.Parent = ScrollFrame
UIGridLayout.SortOrder = Enum.SortOrder.LayoutOrder

ESP.Name = "ESP"
ESP.Parent = ScrollFrame
ESP.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ESP.BorderColor3 = Color3.fromRGB(0, 0, 0)
ESP.BorderSizePixel = 0
ESP.Size = UDim2.new(0, 126, 0, 100)
ESP.Visible = false
ESP.ZIndex = 0

UICorner_10.CornerRadius = UDim.new(0, 12)
UICorner_10.Parent = ESP

TextLabel_2.Parent = ESP
TextLabel_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.BackgroundTransparency = 1.000
TextLabel_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_2.BorderSizePixel = 0
TextLabel_2.Size = UDim2.new(0, 100, 0, 50)
TextLabel_2.Font = Enum.Font.FredokaOne
TextLabel_2.Text = "ESP"
TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.TextSize = 25.000

TextButton.Parent = ESP
TextButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TextButton.BackgroundTransparency = 0.360
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 0
TextButton.Position = UDim2.new(0.0774352998, 0, 0.493177503, 0)
TextButton.Size = UDim2.new(0, 84, 0, 43)
TextButton.Font = Enum.Font.FredokaOne
TextButton.Text = "USAGE"
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextSize = 25.000

UICorner_11.Parent = TextButton

visuals.Name = "visuals"
visuals.Parent = frs
visuals.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
visuals.BackgroundTransparency = 1.000
visuals.BorderColor3 = Color3.fromRGB(0, 0, 0)
visuals.BorderSizePixel = 0
visuals.Size = UDim2.new(0, 577, 0, 521)
visuals.Visible = false

ScrollFrame_2.Name = "ScrollFrame"
ScrollFrame_2.Parent = visuals
ScrollFrame_2.Active = true
ScrollFrame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollFrame_2.BackgroundTransparency = 1.000
ScrollFrame_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollFrame_2.BorderSizePixel = 0
ScrollFrame_2.Position = UDim2.new(-0.330586761, 0, 0, 0)
ScrollFrame_2.Size = UDim2.new(0, 768, 0, 521)

UIPadding_2.Parent = ScrollFrame_2
UIPadding_2.PaddingBottom = UDim.new(0, 10)
UIPadding_2.PaddingLeft = UDim.new(0, 200)
UIPadding_2.PaddingRight = UDim.new(0, 10)
UIPadding_2.PaddingTop = UDim.new(0, 17)

ToggleTest_2.Name = "ToggleTest"
ToggleTest_2.Parent = ScrollFrame_2
ToggleTest_2.Active = true
ToggleTest_2.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ToggleTest_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
ToggleTest_2.BorderSizePixel = 0
ToggleTest_2.Position = UDim2.new(-0.149000004, 0, 0.0130000003, 0)
ToggleTest_2.Size = UDim2.new(0, 127, 0, 125)
ToggleTest_2.Visible = false
ToggleTest_2.ZIndex = 0

UICorner_12.CornerRadius = UDim.new(0, 12)
UICorner_12.Parent = ToggleTest_2

Frame1_2.Name = "Frame 1"
Frame1_2.Parent = ToggleTest_2
Frame1_2.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Frame1_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame1_2.BorderSizePixel = 0
Frame1_2.Position = UDim2.new(0.0654357895, 0, 0.60635072, 0)
Frame1_2.Size = UDim2.new(0, 83, 0, 33)
Frame1_2.ZIndex = 0

UICorner_13.CornerRadius = UDim.new(0, 12)
UICorner_13.Parent = Frame1_2

Toggle_2.Name = "Toggle"
Toggle_2.Parent = ToggleTest_2
Toggle_2.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Toggle_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
Toggle_2.BorderSizePixel = 0
Toggle_2.Position = UDim2.new(0.0654370114, 0, 0.60717833, 0)
Toggle_2.Size = UDim2.new(0, 40, 0, 32)
Toggle_2.Font = Enum.Font.FredokaOne
Toggle_2.Text = ""
Toggle_2.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle_2.TextSize = 25.000

UICorner_14.Parent = Toggle_2

TextLabel_3.Parent = ToggleTest_2
TextLabel_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.BackgroundTransparency = 1.000
TextLabel_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_3.BorderSizePixel = 0
TextLabel_3.Size = UDim2.new(0, 100, 0, 50)
TextLabel_3.Font = Enum.Font.FredokaOne
TextLabel_3.Text = "ESP"
TextLabel_3.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.TextSize = 25.000

UIGridLayout_2.Parent = ScrollFrame_2
UIGridLayout_2.SortOrder = Enum.SortOrder.LayoutOrder

ESP_2.Name = "ESP"
ESP_2.Parent = ScrollFrame_2
ESP_2.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ESP_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
ESP_2.BorderSizePixel = 0
ESP_2.Size = UDim2.new(0, 126, 0, 100)
ESP_2.Visible = false
ESP_2.ZIndex = 0

UICorner_15.CornerRadius = UDim.new(0, 12)
UICorner_15.Parent = ESP_2

TextLabel_4.Parent = ESP_2
TextLabel_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.BackgroundTransparency = 1.000
TextLabel_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_4.BorderSizePixel = 0
TextLabel_4.Size = UDim2.new(0, 100, 0, 50)
TextLabel_4.Font = Enum.Font.FredokaOne
TextLabel_4.Text = "ESP"
TextLabel_4.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.TextSize = 25.000

TextButton_2.Parent = ESP_2
TextButton_2.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TextButton_2.BackgroundTransparency = 0.360
TextButton_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_2.BorderSizePixel = 0
TextButton_2.Position = UDim2.new(0.0774352998, 0, 0.493177503, 0)
TextButton_2.Size = UDim2.new(0, 84, 0, 43)
TextButton_2.Font = Enum.Font.FredokaOne
TextButton_2.Text = "USAGE"
TextButton_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton_2.TextSize = 25.000

UICorner_16.Parent = TextButton_2

combat.Name = "combat"
combat.Parent = frs
combat.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
combat.BackgroundTransparency = 1.000
combat.BorderColor3 = Color3.fromRGB(0, 0, 0)
combat.BorderSizePixel = 0
combat.Size = UDim2.new(0, 577, 0, 521)
combat.Visible = false

ScrollFrame_3.Name = "ScrollFrame"
ScrollFrame_3.Parent = combat
ScrollFrame_3.Active = true
ScrollFrame_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollFrame_3.BackgroundTransparency = 1.000
ScrollFrame_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollFrame_3.BorderSizePixel = 0
ScrollFrame_3.Position = UDim2.new(-0.330586761, 0, 0, 0)
ScrollFrame_3.Size = UDim2.new(0, 768, 0, 521)

UIPadding_3.Parent = ScrollFrame_3
UIPadding_3.PaddingBottom = UDim.new(0, 10)
UIPadding_3.PaddingLeft = UDim.new(0, 200)
UIPadding_3.PaddingRight = UDim.new(0, 10)
UIPadding_3.PaddingTop = UDim.new(0, 17)

ToggleTest_3.Name = "ToggleTest"
ToggleTest_3.Parent = ScrollFrame_3
ToggleTest_3.Active = true
ToggleTest_3.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ToggleTest_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
ToggleTest_3.BorderSizePixel = 0
ToggleTest_3.Position = UDim2.new(-0.149000004, 0, 0.0130000003, 0)
ToggleTest_3.Size = UDim2.new(0, 127, 0, 125)
ToggleTest_3.Visible = false
ToggleTest_3.ZIndex = 0

UICorner_17.CornerRadius = UDim.new(0, 12)
UICorner_17.Parent = ToggleTest_3

Frame1_3.Name = "Frame 1"
Frame1_3.Parent = ToggleTest_3
Frame1_3.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Frame1_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame1_3.BorderSizePixel = 0
Frame1_3.Position = UDim2.new(0.0654357895, 0, 0.60635072, 0)
Frame1_3.Size = UDim2.new(0, 83, 0, 33)
Frame1_3.ZIndex = 0

UICorner_18.CornerRadius = UDim.new(0, 12)
UICorner_18.Parent = Frame1_3

Toggle_3.Name = "Toggle"
Toggle_3.Parent = ToggleTest_3
Toggle_3.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Toggle_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
Toggle_3.BorderSizePixel = 0
Toggle_3.Position = UDim2.new(0.0654370114, 0, 0.60717833, 0)
Toggle_3.Size = UDim2.new(0, 40, 0, 32)
Toggle_3.Font = Enum.Font.FredokaOne
Toggle_3.Text = ""
Toggle_3.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle_3.TextSize = 25.000

UICorner_19.Parent = Toggle_3

TextLabel_5.Parent = ToggleTest_3
TextLabel_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.BackgroundTransparency = 1.000
TextLabel_5.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_5.BorderSizePixel = 0
TextLabel_5.Size = UDim2.new(0, 100, 0, 50)
TextLabel_5.Font = Enum.Font.FredokaOne
TextLabel_5.Text = "ESP"
TextLabel_5.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.TextSize = 25.000

UIGridLayout_3.Parent = ScrollFrame_3
UIGridLayout_3.SortOrder = Enum.SortOrder.LayoutOrder

ESP_3.Name = "ESP"
ESP_3.Parent = ScrollFrame_3
ESP_3.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ESP_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
ESP_3.BorderSizePixel = 0
ESP_3.Size = UDim2.new(0, 126, 0, 100)
ESP_3.Visible = false
ESP_3.ZIndex = 0

UICorner_20.CornerRadius = UDim.new(0, 12)
UICorner_20.Parent = ESP_3

TextLabel_6.Parent = ESP_3
TextLabel_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_6.BackgroundTransparency = 1.000
TextLabel_6.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_6.BorderSizePixel = 0
TextLabel_6.Size = UDim2.new(0, 100, 0, 50)
TextLabel_6.Font = Enum.Font.FredokaOne
TextLabel_6.Text = "ESP"
TextLabel_6.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_6.TextSize = 25.000

TextButton_3.Parent = ESP_3
TextButton_3.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TextButton_3.BackgroundTransparency = 0.360
TextButton_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_3.BorderSizePixel = 0
TextButton_3.Position = UDim2.new(0.0774352998, 0, 0.493177503, 0)
TextButton_3.Size = UDim2.new(0, 84, 0, 43)
TextButton_3.Font = Enum.Font.FredokaOne
TextButton_3.Text = "USAGE"
TextButton_3.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton_3.TextSize = 25.000

UICorner_21.Parent = TextButton_3

troll.Name = "troll"
troll.Parent = frs
troll.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
troll.BackgroundTransparency = 1.000
troll.BorderColor3 = Color3.fromRGB(0, 0, 0)
troll.BorderSizePixel = 0
troll.Size = UDim2.new(0, 577, 0, 521)
troll.Visible = false

ScrollFrame_4.Name = "ScrollFrame"
ScrollFrame_4.Parent = troll
ScrollFrame_4.Active = true
ScrollFrame_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollFrame_4.BackgroundTransparency = 1.000
ScrollFrame_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
ScrollFrame_4.BorderSizePixel = 0
ScrollFrame_4.Position = UDim2.new(-0.330586761, 0, 0, 0)
ScrollFrame_4.Size = UDim2.new(0, 768, 0, 521)

UIPadding_4.Parent = ScrollFrame_4
UIPadding_4.PaddingBottom = UDim.new(0, 10)
UIPadding_4.PaddingLeft = UDim.new(0, 200)
UIPadding_4.PaddingRight = UDim.new(0, 10)
UIPadding_4.PaddingTop = UDim.new(0, 17)

ToggleTest_4.Name = "ToggleTest"
ToggleTest_4.Parent = ScrollFrame_4
ToggleTest_4.Active = true
ToggleTest_4.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ToggleTest_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
ToggleTest_4.BorderSizePixel = 0
ToggleTest_4.Position = UDim2.new(-0.149000004, 0, 0.0130000003, 0)
ToggleTest_4.Size = UDim2.new(0, 127, 0, 125)
ToggleTest_4.Visible = false
ToggleTest_4.ZIndex = 0

UICorner_22.CornerRadius = UDim.new(0, 12)
UICorner_22.Parent = ToggleTest_4

Frame1_4.Name = "Frame 1"
Frame1_4.Parent = ToggleTest_4
Frame1_4.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Frame1_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame1_4.BorderSizePixel = 0
Frame1_4.Position = UDim2.new(0.0654357895, 0, 0.60635072, 0)
Frame1_4.Size = UDim2.new(0, 83, 0, 33)
Frame1_4.ZIndex = 0

UICorner_23.CornerRadius = UDim.new(0, 12)
UICorner_23.Parent = Frame1_4

Toggle_4.Name = "Toggle"
Toggle_4.Parent = ToggleTest_4
Toggle_4.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Toggle_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
Toggle_4.BorderSizePixel = 0
Toggle_4.Position = UDim2.new(0.0654370114, 0, 0.60717833, 0)
Toggle_4.Size = UDim2.new(0, 40, 0, 32)
Toggle_4.Font = Enum.Font.FredokaOne
Toggle_4.Text = ""
Toggle_4.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle_4.TextSize = 25.000

UICorner_24.Parent = Toggle_4

TextLabel_7.Parent = ToggleTest_4
TextLabel_7.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_7.BackgroundTransparency = 1.000
TextLabel_7.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_7.BorderSizePixel = 0
TextLabel_7.Size = UDim2.new(0, 100, 0, 50)
TextLabel_7.Font = Enum.Font.FredokaOne
TextLabel_7.Text = "ESP"
TextLabel_7.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_7.TextSize = 25.000

UIGridLayout_4.Parent = ScrollFrame_4
UIGridLayout_4.SortOrder = Enum.SortOrder.LayoutOrder

ESP_4.Name = "ESP"
ESP_4.Parent = ScrollFrame_4
ESP_4.BackgroundColor3 = Color3.fromRGB(5, 5, 5)
ESP_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
ESP_4.BorderSizePixel = 0
ESP_4.Size = UDim2.new(0, 126, 0, 100)
ESP_4.Visible = false
ESP_4.ZIndex = 0

UICorner_25.CornerRadius = UDim.new(0, 12)
UICorner_25.Parent = ESP_4

TextLabel_8.Parent = ESP_4
TextLabel_8.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_8.BackgroundTransparency = 1.000
TextLabel_8.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel_8.BorderSizePixel = 0
TextLabel_8.Size = UDim2.new(0, 100, 0, 50)
TextLabel_8.Font = Enum.Font.FredokaOne
TextLabel_8.Text = "ESP"
TextLabel_8.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_8.TextSize = 25.000

TextButton_4.Parent = ESP_4
TextButton_4.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
TextButton_4.BackgroundTransparency = 0.360
TextButton_4.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton_4.BorderSizePixel = 0
TextButton_4.Position = UDim2.new(0.0774352998, 0, 0.493177503, 0)
TextButton_4.Size = UDim2.new(0, 84, 0, 43)
TextButton_4.Font = Enum.Font.FredokaOne
TextButton_4.Text = "USAGE"
TextButton_4.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton_4.TextSize = 25.000

UICorner_26.Parent = TextButton_4

-- Scripts:

local function HHHMY_fake_script() -- ImageButton.LocalScript 
	local script = Instance.new('LocalScript', ImageButton)

	script.Parent.MouseButton1Click:Connect(function ()
		script.Parent.Parent.Parent:Destroy()
	end)
end
coroutine.wrap(HHHMY_fake_script)()
local function QCAVOWW_fake_script() -- MainFrame.UIDrag 
	local script = Instance.new('LocalScript', MainFrame)

	local UIS = game:GetService('UserInputService')
	local frame = script.Parent
	local dragToggle = nil
	local dragSpeed = 0
	local dragStart = nil
	local startPos = nil
	
	local function updateInput(input)
		local delta = input.Position - dragStart
		local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
	end
	
	frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)
	
	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragToggle then
				updateInput(input)
			end
		end
	end)
end
coroutine.wrap(QCAVOWW_fake_script)()
local function QBNBNIY_fake_script() -- home.LocalScript 
	local script = Instance.new('LocalScript', home)

	local frame = script.Parent
	local players = game:GetService("Players")
	local tweenService = game:GetService("TweenService")
	
	
	local greetings = {
		"Welcome, ", "Hey there, ", "Greetings, ", "Yo, ",
		"Hi, ", "Salutations, ", "Sup, ", "Welcome back, "
	}
	
	
	local function getPlayerInfo(player)
		return {
			Name = player.Name,
			DisplayName = player.DisplayName,
			AccountAge = player.AccountAge .. " days",
			UserId = "ID: " .. player.UserId,
			Membership = player.MembershipType.Name,
			JoinDate = "Joined: " .. os.date("%Y-%m-%d", os.time() - player.AccountAge * 86400)
		}
	end
	
	
	local function createTween(instance, properties, duration)
		local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		return tweenService:Create(instance, tweenInfo, properties)
	end
	
	local function createInfoElements()
	
		for _, child in ipairs(frame:GetChildren()) do
			if child:IsA("GuiObject") and child ~= script then
				child:Destroy()
			end
		end
	
	
		frame.ClipsDescendants = true
	
		local layout = Instance.new("UIListLayout")
		layout.SortOrder = Enum.SortOrder.LayoutOrder
		layout.Padding = UDim.new(0, 8)
		layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
		layout.VerticalAlignment = Enum.VerticalAlignment.Top
		layout.Parent = frame
	
	
		local avatar = Instance.new("ImageLabel")
		avatar.Size = UDim2.new(0, 100, 0, 100)
		avatar.BackgroundTransparency = 1
		avatar.ImageTransparency = 1
		avatar.AnchorPoint = Vector2.new(0.5, 0)
		avatar.Position = UDim2.new(0.5, 0, 0, 0)
		avatar.Parent = frame
	
	
		local greetingLabel = Instance.new("TextLabel")
		greetingLabel.Size = UDim2.new(1, 0, 0, 30)
		greetingLabel.BackgroundTransparency = 1
		greetingLabel.TextScaled = true
		greetingLabel.Font = Enum.Font.GothamBold
		greetingLabel.TextColor3 = Color3.fromRGB(255, 200, 100)
		greetingLabel.TextTransparency = 1
		greetingLabel.Parent = frame
	
	
		local function createLabel(name, color)
			local label = Instance.new("TextLabel")
			label.Name = name
			label.Size = UDim2.new(1, 0, 0, 25)
			label.BackgroundTransparency = 1
			label.TextScaled = true
			label.Font = Enum.Font.Gotham
			label.TextColor3 = color or Color3.new(1, 1, 1)
			label.TextTransparency = 1
			label.Parent = frame
			return label
		end
	
		local infoLabels = {
			NameLabel = createLabel("NameLabel"),
			DisplayNameLabel = createLabel("DisplayNameLabel"),
			AccountAgeLabel = createLabel("AccountAgeLabel"),
			UserIdLabel = createLabel("UserIdLabel"),
			MembershipLabel = createLabel("MembershipLabel", Color3.fromRGB(150, 200, 255)),
			JoinDateLabel = createLabel("JoinDateLabel", Color3.fromRGB(200, 150, 255)),
		}
	
		return {
			avatar = avatar,
			greeting = greetingLabel,
			labels = infoLabels
		}
	end
	
	
	local function animateElements(elements)
		createTween(elements.avatar, { ImageTransparency = 0 }, 0.6):Play()
		createTween(elements.greeting, { TextTransparency = 0 }, 0.4):Play()
		for _, label in pairs(elements.labels) do
			task.delay(0.1, function()
				createTween(label, { TextTransparency = 0 }, 0.4):Play()
			end)
		end
	end
	
	
	local function updatePlayerInfo(player, elements)
		local info = getPlayerInfo(player)
		local greeting = greetings[math.random(1, #greetings)] .. info.Name .. "!"
	
		local image, ready = players:GetUserThumbnailAsync(player.UserId, Enum.ThumbnailType.AvatarBust, Enum.ThumbnailSize.Size100x100)
		if ready then
			elements.avatar.Image = image
		else
			elements.avatar.Image = ""
		end
	
		elements.greeting.Text = greeting
		elements.labels.NameLabel.Text = "Username: " .. info.Name
		elements.labels.DisplayNameLabel.Text = "Display Name: " .. info.DisplayName
		elements.labels.AccountAgeLabel.Text = "Account Age: " .. info.AccountAge
		elements.labels.UserIdLabel.Text = info.UserId
		elements.labels.MembershipLabel.Text = "Membership: " .. info.Membership
		elements.labels.JoinDateLabel.Text = info.JoinDate
	
	
	end
	
	-- main
	local function setup()
		local player = players.LocalPlayer
		if not player then
			warn(" LocalPlayer missing")
			return
		end
	
		local ui = createInfoElements()
		updatePlayerInfo(player, ui)
		animateElements(ui)
	end
	
	setup()
	
end
coroutine.wrap(QBNBNIY_fake_script)()
local function FWKDDM_fake_script() -- player.functions 
	local script = Instance.new('LocalScript', player)

	local ScrollFrame = script.Parent.ScrollFrame
	local ButtonTemplate = ScrollFrame.ESP
	local ToggleTemplate = ScrollFrame.ToggleTest
	
	-- Positioning variables
	local spacing = 10
	local elementWidth = 150
	local elementHeight = 40
	local startX = 0  -- Start at x=0
	local currentX = startX
	local currentY = 0  -- Start at y=0
	
	function AutoPositionRight(uiElement)
		uiElement.Position = UDim2.new(0, currentX, 0, currentY)
		uiElement.Size = UDim2.new(0, elementWidth, 0, elementHeight)
	
		currentX = currentX + elementWidth + spacing  
	
		if currentX + elementWidth > ScrollFrame.AbsoluteSize.X then
			currentX = 0  
			currentY = currentY + elementHeight + spacing
		end
	end
	
	-- AddButton function
	function AddButton(data)
	
		local Button = ButtonTemplate:Clone()
		Button.Visible = true
		Button.Parent = ScrollFrame
		Button.Name = data.Name
	
	
		Button.TextLabel.Text = data.Name
		Button.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		Button.BackgroundTransparency = 0.2
	
		AutoPositionRight(Button)
	
	
		local infoFrame = Instance.new("Frame")
		infoFrame.Name = "InfoFrame"
		infoFrame.Size = UDim2.new(0, 300, 0, 200)
		infoFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
		infoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
		infoFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		infoFrame.BackgroundTransparency = 1
		infoFrame.Visible = false
		infoFrame.Parent = script.Parent 
	
	
		local gradient = Instance.new("UIGradient")
		gradient.Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 50))
		}
		gradient.Rotation = 90
		gradient.Parent = infoFrame
	
	
		local titleLabel = Instance.new("TextLabel")
		titleLabel.Name = "TitleLabel"
		titleLabel.Size = UDim2.new(0.9, 0, 0.15, 0)
		titleLabel.Position = UDim2.new(0.05, 0, 0.05, 0)
		titleLabel.Text = data.Name
		titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.TextScaled = true
		titleLabel.Font = Enum.Font.GothamBold
		titleLabel.BackgroundTransparency = 1
		titleLabel.Parent = infoFrame
	
	
		if data.Description then
			local descLabel = Instance.new("TextLabel")
			descLabel.Name = "DescriptionLabel"
			descLabel.Size = UDim2.new(0.9, 0, 0.6, 0)
			descLabel.Position = UDim2.new(0.05, 0, 0.25, 0)
			descLabel.Text = data.Description
			descLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
			descLabel.TextWrapped = true
			descLabel.TextXAlignment = Enum.TextXAlignment.Left
			descLabel.TextYAlignment = Enum.TextYAlignment.Top
			descLabel.BackgroundTransparency = 1
			descLabel.Parent = infoFrame
		end
	
		local closeButton = Instance.new("TextButton")
		closeButton.Name = "CloseButton"
		closeButton.Size = UDim2.new(0.3, 0, 0.15, 0)
		closeButton.Position = UDim2.new(0.35, 0, 0.8, 0)
		closeButton.Text = "Close"
		closeButton.Font = Enum.Font.Gotham
		closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		closeButton.BackgroundColor3 = Color3.fromRGB(80, 80, 120)
		closeButton.Parent = infoFrame
	
	
		local tweenService = game:GetService("TweenService")
		local hoverTweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local clickTweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		local frameTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	
	
		Button.TextButton.MouseEnter:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(60, 60, 60),
				BackgroundTransparency = 0
			})
			hoverTween:Play()
		end)
	
		Button.TextButton.MouseLeave:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(45, 45, 45),
				BackgroundTransparency = 0.2
			})
			hoverTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Down:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size - UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
		Button.TextButton.MouseButton1Up:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size + UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Click:Connect(function()
	
			infoFrame.Visible = true
			infoFrame.BackgroundTransparency = 1
			infoFrame.Size = UDim2.new(0, 10, 0, 10)
	
			local openTween1 = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 0,
				Size = UDim2.new(0, 320, 0, 220)
			})
	
			local openTween2 = tweenService:Create(infoFrame, frameTweenInfo, {
				Size = UDim2.new(0, 300, 0, 200)
			})
	
			openTween1:Play()
			openTween1.Completed:Wait()
			openTween2:Play()
	
			if data.HoverText then
				local originalText = Button.TextLabel.Text
				Button.TextLabel.Text = data.HoverText
				task.delay(0.6, function()
					Button.TextLabel.Text = originalText
				end)
			end
	
	
			pcall(data.Callback)
		end)
	
		closeButton.MouseButton1Click:Connect(function()
			local closeTween = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 1,
				Size = UDim2.new(0, 10, 0, 10)
			})
	
			closeTween:Play()
			closeTween.Completed:Wait()
			infoFrame.Visible = false
		end)
	
		return Button
	end
	
	
	function AddToggle(data)
		local Toggle = ToggleTemplate:Clone()
		Toggle.Visible = true
		Toggle.Parent = ScrollFrame
		Toggle.Name = data.Name
		Toggle.TextLabel.Text = data.Name
	
		AutoPositionRight(Toggle)
	
	
		local Circle = Toggle.Toggle
		if not Circle then
			warn("Circle/Slider not found in ToggleTemplate: " .. data.Name)
			return
		end
	
		local state = data.Default or false
	
		local function updateToggleVisual()
	
			local toggleWidth = Toggle.AbsoluteSize.X
			local circleWidth = Circle.AbsoluteSize.X
			local padding = 4 
	
			if state then
	
				Circle:TweenPosition(
					UDim2.new(1, -circleWidth - padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
				Circle.BackgroundColor3 = Color3.fromRGB(52, 255, 6)
			else
	
				Circle:TweenPosition(
					UDim2.new(0, padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
	
				Circle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			end
		end
	
		updateToggleVisual()
	
		Toggle.Toggle.MouseButton1Click:Connect(function()
			state = not state
			updateToggleVisual()
			if data.Callback then
				pcall(data.Callback, state) 
			end
		end)
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	
	
	
	
	
	
	--func
	
	
	
	
	_G.spinbot = false
	-- God Mode
	AddButton({
		Name = "GodMode",
		Title = "God Mode",
		Description = "2 life",
		Callback = function()
			local player = game.Players.LocalPlayer     
			if player.Character then
				if player.Character:FindFirstChild("Humanoid") then
					player.Character.Humanoid.Name = "1"
				end
				local l = player.Character["1"]:Clone()
				l.Parent = player.Character
				l.Name = "Humanoid"
				wait(0.1)
				player.Character["1"]:Destroy()
				workspace.CurrentCamera.CameraSubject = player.Character.Humanoid
				player.Character.Animate.Disabled = true
				wait(0.1)
				player.Character.Animate.Disabled = false
			end
		end,
		HoverText = "you will get 2 lifes"
	})
	
	-- No-Clip
	AddButton({
		Name = "noclip",
		Title = "Toggle No-Clip",
		Description = "walk through walls",
		Callback = function()
			_G.noclip = not _G.noclip
			if not game:GetService('Players').LocalPlayer.Character:FindFirstChild("LowerTorso") then
				while _G.noclip do
					game:GetService("RunService").Stepped:wait()
					game.Players.LocalPlayer.Character.Head.CanCollide = false
					game.Players.LocalPlayer.Character.Torso.CanCollide = false
				end
			else
				if _G.InitNC ~= true then     
					_G.NCFunc = function(part)      
						local pos = game:GetService('Players').LocalPlayer.Character.LowerTorso.Position.Y  
						if _G.noclip then             
							if part.Position.Y > pos then                 
								part.CanCollide = false             
							end        
						end    
					end      
					_G.InitNC = true 
				end 
				game:GetService('Players').LocalPlayer.Character.Humanoid.Touched:connect(_G.NCFunc) 
			end
		end,
		HoverText = "Toggle walking throught walls"
	})
	
	-- Spin Bot
	AddToggle({
		Name = "SPINBOT",
		Title = "Spin Bot",
		Default = false,
		Callback = function(state)
			if _G.awid38r732rhnfd8332 == false then
				game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "premium only"})
			else
				if state == false then
					_G.spinbot = false
				else
					_G.spinbot = true
				end
			end
	
			local player = game.Players.LocalPlayer
			local character = player.Character or player.CharacterAdded:Wait()
			local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
			while _G.spinbot == true do
				wait(0.00001)
				humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.Angles(0, math.rad(50), 0)
			end
		end
	})
	
	
	-- TP
	AddButton({
		Name = "teleport",
		Title = "tp",
		Description = "teleport to any player by gui",
		Callback = function()
			local Players = game:GetService("Players")
			local StarterGui = game:GetService("StarterGui")
			local LocalPlayer = Players.LocalPlayer
	
	
	
			local gui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))
			gui.Name = "TeleportUI"
	
			local mainFrame = Instance.new("Frame", gui)
			mainFrame.Size = UDim2.new(0, 300, 0, 150)
			mainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
			mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			mainFrame.BorderSizePixel = 0
			mainFrame.BackgroundTransparency = 0.1
			mainFrame.Active = true
			mainFrame.Draggable = true
	
			local title = Instance.new("TextLabel", mainFrame)
			title.Size = UDim2.new(1, 0, 0, 30)
			title.Position = UDim2.new(0, 0, 0, 0)
			title.Text = "Select Player To Teleport"
			title.Font = Enum.Font.GothamBold
			title.TextSize = 16
			title.TextColor3 = Color3.fromRGB(255, 255, 255)
			title.BackgroundTransparency = 1
	
			local dropdown = Instance.new("TextButton", mainFrame)
			dropdown.Size = UDim2.new(1, -20, 0, 30)
			dropdown.Position = UDim2.new(0, 10, 0, 50)
			dropdown.Text = "Select a player"
			dropdown.Font = Enum.Font.Gotham
			dropdown.TextSize = 14
			dropdown.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
			dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
			dropdown.AutoButtonColor = false
	
			local dropdownFrame = Instance.new("ScrollingFrame", mainFrame)
			dropdownFrame.Size = UDim2.new(1, -20, 0, 90)
			dropdownFrame.Position = UDim2.new(0, 10, 0, 85)
			dropdownFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
			dropdownFrame.Visible = false
			dropdownFrame.ScrollBarThickness = 6
			dropdownFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
			dropdownFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
			dropdownFrame.ClipsDescendants = true
			dropdownFrame.ScrollingDirection = Enum.ScrollingDirection.Y
	
	
	
			for _, obj in ipairs({mainFrame, dropdown, dropdownFrame}) do
				local stroke = Instance.new("UIStroke", obj)
				stroke.Color = Color3.fromRGB(90, 90, 90)
				stroke.Thickness = 1
			end
	
			local layout = Instance.new("UIListLayout", dropdownFrame)
			layout.Padding = UDim.new(0, 2)
			layout.SortOrder = Enum.SortOrder.LayoutOrder
	
	
			local function notify(titleText, contentText, duration)
				pcall(function()
					StarterGui:SetCore("SendNotification", {
						Title = titleText,
						Text = contentText,
						Duration = duration or 3
					})
				end)
			end
	
			local function teleportToPlayer(playerName)
				if not _G.awid38r732rhnfd8332 then
					notify("Error", "Premium only", 3)
					return
				end
	
				for _, player in pairs(Players:GetPlayers()) do
					if player.Name == playerName or player.DisplayName == playerName then
						local char = player.Character
						if char and char:FindFirstChild("HumanoidRootPart") then
							LocalPlayer.Character:MoveTo(char.HumanoidRootPart.Position)
							notify("Success", "Teleported to " .. playerName, 3)
							return
						end
					end
				end
	
				notify("Error", "Player not found or invalid", 3)
			end
	
			-- Dropdown population
			local function setDropdownList()
				for _, child in pairs(dropdownFrame:GetChildren()) do
					if child:IsA("TextButton") then child:Destroy() end
				end
	
				for _, player in pairs(Players:GetPlayers()) do
					if player ~= LocalPlayer then
						local button = Instance.new("TextButton", dropdownFrame)
						button.Size = UDim2.new(1, 0, 0, 25)
						button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
						button.TextColor3 = Color3.fromRGB(255, 255, 255)
						button.Font = Enum.Font.Gotham
						button.TextSize = 13
						button.Text = player.Name
						button.MouseButton1Click:Connect(function()
							dropdown.Text = player.Name
							dropdownFrame.Visible = false
							teleportToPlayer(player.Name)
						end)
					end
				end
			end
	
	
			dropdown.MouseButton1Click:Connect(function()
				setDropdownList()
				dropdownFrame.Visible = not dropdownFrame.Visible
			end)
	
			Players.PlayerAdded:Connect(setDropdownList)
			Players.PlayerRemoving:Connect(setDropdownList)
	
		end,
		HoverText = "teleport to any player by gui"
	})
	
	
	
	
	
	-- timer
	AddButton({
		Name = "timer",
		Title = "roundtimer",
		Description = "see time of round",
		Callback = function()
			if _G.awid38r732rhnfd8332 == false then
				game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "only premium"})
			else
				local screenGui = Instance.new("ScreenGui")
				screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui") -- Parent it to the player's GUI
				screenGui.ResetOnSpawn = false
	
				local textLabel = Instance.new("TextLabel")
				textLabel.Parent = screenGui 
	
	
				textLabel.Size = UDim2.new(0, 150, 0, 50) 
				textLabel.Position = UDim2.new(0, 10, 0, 10) 
				textLabel.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
				textLabel.TextColor3 = Color3.new(1, 1, 1) 
				textLabel.TextScaled = true 
				textLabel.Font = Enum.Font.SourceSansBold 
				textLabel.Text = "Loading time..." 
				textLabel.Active = true 
				textLabel.Draggable = true 
	
	
				local function updateTime()
					local currentTime = game.Workspace.RoundTimerPart.SurfaceGui.Timer.Text
					textLabel.Text = "Round Time: " .. currentTime 
				end
	
	
				local userInputService = game:GetService("UserInputService")
				local dragging = false
				local dragStartPos = Vector2.new(0, 0)
				local labelStartPos = Vector2.new(0, 0)
	
				textLabel.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						dragging = true
						dragStartPos = Vector2.new(input.Position.X, input.Position.Y)
						labelStartPos = Vector2.new(textLabel.Position.X.Offset, textLabel.Position.Y.Offset)
					end
				end)
	
				textLabel.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						dragging = false
					end
				end)
	
				userInputService.InputChanged:Connect(function(input)
					if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
						local dragDelta = Vector2.new(input.Position.X, input.Position.Y) - dragStartPos
						textLabel.Position = UDim2.new(0, labelStartPos.X + dragDelta.X, 0, labelStartPos.Y + dragDelta.Y)
					end
				end)
	
	
				while true do
					updateTime()
					task.wait(1)
				end
			end
	
		end,
		HoverText = "timer to round end"
	})
	--TP TO MAP
	AddButton({
		Name = "TP map",
		HoverText = "teleport to map",
		Callback = function()
			local localplayer = game:GetService("Players").LocalPlayer
	
			local function getMap()
				for _, v in ipairs(workspace:GetChildren()) do
					if v:FindFirstChild("CoinContainer") and v:FindFirstChild("Spawns") then
						return v
					end
				end
				return nil
			end
	
			local map = getMap()
			if map and map.Spawns then
				local spawns = map.Spawns:GetChildren()
				if #spawns > 0 and localplayer.Character then
					local randomSpawn = spawns[math.random(1, #spawns)]
					localplayer.Character:MoveTo(randomSpawn.Position)
				end
			else
				-- You can add a notification for when a map isn't found
				-- print("Map or spawn points not found!")
			end
		end
	})
	
	
	
	--TP TO MURD
	AddButton({
		Name = "TP murd",
		HoverText = "teleport to murderer",
		Callback = function()
			local function GetMurderer()
				for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
					if player.Character and (player.Character:FindFirstChild("Knife") or player.Backpack:FindFirstChild("Knife")) then
						return player
					end
				end
				return nil
			end
	
			local murderer = GetMurderer()
			local localPlayer = game.Players.LocalPlayer
	
			if murderer and murderer.Character and murderer.Character:FindFirstChild("HumanoidRootPart") and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
				localPlayer.Character.HumanoidRootPart.CFrame = murderer.Character.HumanoidRootPart.CFrame
			end
		end
	})
	
	
	
	--TP TO SHER
	AddButton({
		Name = "TP sher",
		HoverText = "teleport to sheriff",
		Callback = function()
			local function GetSheriff()
				for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
					if player.Character and (player.Character:FindFirstChild("Gun") or player.Backpack:FindFirstChild("Gun")) then
						return player
					end
				end
				return nil
			end
	
			local sheriff = GetSheriff()
			local localPlayer = game.Players.LocalPlayer
	
			if sheriff and sheriff.Character and sheriff.Character:FindFirstChild("HumanoidRootPart") and localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
				localPlayer.Character.HumanoidRootPart.CFrame = sheriff.Character.HumanoidRootPart.CFrame
			end
		end
	})
	
	
	--COIN FARM
	AddButton({
		Name = "coin farm",
		HoverText = "teleport to sheriff",
		Description = "opens gui with farming coins",
		Callback = function()
			if _G.awid38r732rhnfd8332 == true then
			local Players = game:GetService("Players")
			local RunService = game:GetService("RunService")
			local player = Players.LocalPlayer
			local playerGui = player:WaitForChild("PlayerGui")
	
			local character = player.Character or player.CharacterAdded:Wait()
			local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
	
			player.CharacterAdded:Connect(function(char)
				character = char
				humanoidRootPart = character:WaitForChild("HumanoidRootPart")
			end)
	
	
			_G.farmdef = false
			local moveSpeed = 20
	
	
			local screenGui = Instance.new("ScreenGui", playerGui)
			screenGui.Name = "CoinFarmGui"
			screenGui.ResetOnSpawn = false
	
			local main = Instance.new("Frame", screenGui)
			main.Size = UDim2.new(0, 250, 0, 150)
			main.Position = UDim2.new(0.5, -125, 0.5, -75)
			main.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
			main.BorderSizePixel = 0
			main.Active = true
			main.Draggable = true
	
			local title = Instance.new("TextLabel", main)
			title.Size = UDim2.new(1, 0, 0, 30)
			title.Text = "🪙 Coin Farm"
			title.TextColor3 = Color3.new(1, 1, 1)
			title.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			title.BorderSizePixel = 0
			title.Font = Enum.Font.SourceSansBold
			title.TextSize = 20
	
			local toggle = Instance.new("TextButton", main)
			toggle.Size = UDim2.new(1, -20, 0, 35)
			toggle.Position = UDim2.new(0, 10, 0, 40)
			toggle.Text = "Start Farm"
			toggle.TextColor3 = Color3.new(1, 1, 1)
			toggle.BackgroundColor3 = Color3.fromRGB(60, 130, 60)
			toggle.BorderSizePixel = 0
			toggle.Font = Enum.Font.SourceSans
			toggle.TextSize = 18
	
			local speedLabel = Instance.new("TextLabel", main)
			speedLabel.Size = UDim2.new(1, -20, 0, 20)
			speedLabel.Position = UDim2.new(0, 10, 0, 85)
			speedLabel.Text = "Speed: 20"
			speedLabel.TextColor3 = Color3.new(1, 1, 1)
			speedLabel.BackgroundTransparency = 1
			speedLabel.Font = Enum.Font.SourceSans
			speedLabel.TextSize = 16
			speedLabel.TextXAlignment = Enum.TextXAlignment.Left
	
			local slider = Instance.new("TextButton", main)
			slider.Size = UDim2.new(1, -20, 0, 20)
			slider.Position = UDim2.new(0, 10, 0, 110)
			slider.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
			slider.Text = ""
			slider.AutoButtonColor = false
			slider.BorderSizePixel = 0
	
			local sliderKnob = Instance.new("Frame", slider)
			sliderKnob.Size = UDim2.new(0, 10, 1, 0)
			sliderKnob.Position = UDim2.new(0.4, 0, 0, 0)
			sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			sliderKnob.BorderSizePixel = 0
	
			-- Slider logic
			local function updateSlider(inputX)
				local rel = (inputX - slider.AbsolutePosition.X) / slider.AbsoluteSize.X
				rel = math.clamp(rel, 0, 1)
				sliderKnob.Position = UDim2.new(rel, -5, 0, 0)
				moveSpeed = math.floor(16 + (25 - 16) * rel)
				speedLabel.Text = "Speed: " .. moveSpeed
			end
	
			slider.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					updateSlider(input.Position.X)
					local moveConn
					moveConn = game:GetService("UserInputService").InputChanged:Connect(function(inputMove)
						if inputMove.UserInputType == Enum.UserInputType.MouseMovement then
							updateSlider(inputMove.Position.X)
						end
					end)
					input.Changed:Connect(function()
						if input.UserInputState == Enum.UserInputState.End then
							if moveConn then moveConn:Disconnect() end
						end
					end)
				end
			end)
	
	
			local function getNearestCoin(pos)
				local nearest, dist = nil, math.huge
				for _, obj in ipairs(workspace:GetDescendants()) do
					if obj.Name == "Coin_Server" and obj:IsA("BasePart") then
						local d = (obj.Position - pos).Magnitude
						if d < dist then
							dist = d
							nearest = obj
						end
					end
				end
				return nearest
			end
	
			local function moveTo(pos)
				local start = humanoidRootPart.Position
				local dir = (pos - start).Unit
				local startTime = tick()
				while _G.farmdef and (humanoidRootPart.Position - pos).Magnitude > 1 do
					local elapsed = tick() - startTime
					local nextPos = start + dir * moveSpeed * elapsed
					humanoidRootPart.CFrame = CFrame.new(nextPos)
					RunService.Heartbeat:Wait()
				end
			end
	
			local function startFarm()
				spawn(function()
					while _G.farmdef do
						local coin = getNearestCoin(humanoidRootPart.Position)
						if coin then
							moveTo(coin.Position)
							if coin and coin.Parent then
								coin:Destroy()
							end
						end
						wait(0.1)
					end
				end)
			end
	
	
			toggle.MouseButton1Click:Connect(function()
				_G.farmdef = not _G.farmdef
				if _G.farmdef then
					toggle.Text = "Stop Farm"
					toggle.BackgroundColor3 = Color3.fromRGB(150, 60, 60)
					startFarm()
				else
					toggle.Text = "Start Farm"
					toggle.BackgroundColor3 = Color3.fromRGB(60, 130, 60)
				end
			end)
			else
				game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "premium only"})
			end
			
		end
	})
end
coroutine.wrap(FWKDDM_fake_script)()
local function YLCHC_fake_script() -- ToggleTest.LocalScript 
	local script = Instance.new('LocalScript', ToggleTest)

	--[[
		Toggle Animation Script
		
		Instructions:
		1. Create a 'LocalScript' inside your "ToggleTest" frame.
		2. Paste all of this code into that 'LocalScript'.
		3. Your "ToggleTest" frame should contain a background frame (e.g., "Frame 1") 
		   and a TextButton named "Toggle".
		4. That's it! This script works without changing the default AnchorPoint.
	]]
	
	-- Services
	local TweenService = game:GetService("TweenService")
	
	-- UI Elements
	-- This LocalScript should be placed directly inside your "ToggleTest" frame.
	local toggleFrame = script.Parent 
	
	-- This script assumes your background is named "Frame 1" and the button is a TextButton named "Toggle".
	local background = toggleFrame:WaitForChild("Frame 1") -- The background of the switch
	local toggleButton = toggleFrame:WaitForChild("Toggle") -- The part that moves
	
	-- ==================================
	--        CONFIGURATION
	-- ==================================
	
	local TWEEN_DURATION = 0.2 -- How long the animation takes in seconds
	local EasingStyle = Enum.EasingStyle.Quint -- The style of the animation curve (smoothness)
	local EasingDirection = Enum.EasingDirection.Out -- The direction of the animation curve
	
	-- How much space to leave on the left/right of the toggle button. 
	-- 0.05 means 5% of the background's width. Set to 0 for no padding.
	local PADDING_SCALE = 0.05 
	
	-- NEW VARIABLE: Controls how far the button travels across the background.
	-- 1.0 = travels the full available distance.
	-- 0.5 = travels half the available distance.
	-- Set this to a smaller number to reduce how far it moves.
	local TRAVEL_DISTANCE_SCALE = 0.57
	
	-- Colors for ON/OFF states (You can change these RGB values)
	local ON_COLOR = Color3.fromRGB(75, 181, 67)   -- A nice green when ON
	local OFF_COLOR = Color3.fromRGB(57, 57, 57) -- Dark grey when OFF
	
	-- ==================================
	--        SCRIPT LOGIC
	-- ==================================
	
	-- State Variable
	local isToggled = false -- 'false' means it starts in the OFF state
	
	-- Tween Information (This combines the duration and easing settings for the animation)
	local tweenInfo = TweenInfo.new(TWEEN_DURATION, EasingStyle, EasingDirection)
	
	-- Function to update the toggle's visual state based on the 'isToggled' variable
	local function updateToggleState()
		local goalPosition
		local goalColor
	
		-- We read the button's current Y position to avoid messing up your vertical alignment.
		local currentYPosition = toggleButton.Position.Y
	
		-- Define the start and end points of the toggle's path
		local startX = PADDING_SCALE
		local endX = 1 - toggleButton.Size.X.Scale - PADDING_SCALE
	
		-- Calculate the total distance the button can possibly travel
		local travelableDistance = endX - startX
	
		if isToggled then
			-- Set the goals for the "ON" state
			goalColor = ON_COLOR
	
			-- Calculate the final "ON" position based on the travel distance modifier
			local onX = startX + (travelableDistance * TRAVEL_DISTANCE_SCALE)
			goalPosition = UDim2.new(onX, 0, currentYPosition.Scale, currentYPosition.Offset)
		else
			-- Set the goals for the "OFF" state
			goalColor = OFF_COLOR
	
			-- The "OFF" position is the starting position.
			goalPosition = UDim2.new(startX, 0, currentYPosition.Scale, currentYPosition.Offset)
		end
	
		-- Create the animations (Tweens) for position and color
		local positionTween = TweenService:Create(toggleButton, tweenInfo, { Position = goalPosition })
		local colorTween = TweenService:Create(background, tweenInfo, { BackgroundColor3 = goalColor })
	
		-- Play the animations simultaneously
		positionTween:Play()
		colorTween:Play()
	end
	
	-- This function runs whenever the "Toggle" TextButton is clicked
	toggleButton.MouseButton1Click:Connect(function()
		-- Flip the state from on-to-off or off-to-on
		isToggled = not isToggled
	
		-- Run the animation function to update the visuals
		updateToggleState()
	
		-- You can add your other code here to make the toggle actually do something
		if isToggled then
			print(toggleFrame.Name .. " was toggled ON")
			-- Example: game.Workspace.SomePart.Transparency = 0
		else
			print(toggleFrame.Name .. " was toggled OFF")
			-- Example: game.Workspace.SomePart.Transparency = 1
		end
	end)
	
	-- Set the initial visual state to OFF when the game starts or UI loads
	task.wait() -- Add a tiny delay to ensure the UI has loaded its properties correctly
	updateToggleState()
	
end
coroutine.wrap(YLCHC_fake_script)()
local function QNTEM_fake_script() -- visuals.functions 
	local script = Instance.new('LocalScript', visuals)

	local ScrollFrame = script.Parent.ScrollFrame
	local ButtonTemplate = ScrollFrame.ESP
	local ToggleTemplate = ScrollFrame.ToggleTest
	
	-- Positioning variables
	local spacing = 10
	local elementWidth = 150
	local elementHeight = 40
	local startX = 0  -- Start at x=0
	local currentX = startX
	local currentY = 0  -- Start at y=0
	
	function AutoPositionRight(uiElement)
		uiElement.Position = UDim2.new(0, currentX, 0, currentY)
		uiElement.Size = UDim2.new(0, elementWidth, 0, elementHeight)
	
		currentX = currentX + elementWidth + spacing  
	
		if currentX + elementWidth > ScrollFrame.AbsoluteSize.X then
			currentX = 0  
			currentY = currentY + elementHeight + spacing
		end
	end
	
	-- AddButton function
	function AddButton(data)
	
		local Button = ButtonTemplate:Clone()
		Button.Visible = true
		Button.Parent = ScrollFrame
		Button.Name = data.Name
	
	
		Button.TextLabel.Text = data.Name
		Button.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		Button.BackgroundTransparency = 0.2
	
		AutoPositionRight(Button)
	
	
		local infoFrame = Instance.new("Frame")
		infoFrame.Name = "InfoFrame"
		infoFrame.Size = UDim2.new(0, 300, 0, 200)
		infoFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
		infoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
		infoFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		infoFrame.BackgroundTransparency = 1
		infoFrame.Visible = false
		infoFrame.Parent = script.Parent 
	
	
		local gradient = Instance.new("UIGradient")
		gradient.Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 50))
		}
		gradient.Rotation = 90
		gradient.Parent = infoFrame
	
	
		local titleLabel = Instance.new("TextLabel")
		titleLabel.Name = "TitleLabel"
		titleLabel.Size = UDim2.new(0.9, 0, 0.15, 0)
		titleLabel.Position = UDim2.new(0.05, 0, 0.05, 0)
		titleLabel.Text = data.Name
		titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.TextScaled = true
		titleLabel.Font = Enum.Font.GothamBold
		titleLabel.BackgroundTransparency = 1
		titleLabel.Parent = infoFrame
	
	
		if data.Description then
			local descLabel = Instance.new("TextLabel")
			descLabel.Name = "DescriptionLabel"
			descLabel.Size = UDim2.new(0.9, 0, 0.6, 0)
			descLabel.Position = UDim2.new(0.05, 0, 0.25, 0)
			descLabel.Text = data.Description
			descLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
			descLabel.TextWrapped = true
			descLabel.TextXAlignment = Enum.TextXAlignment.Left
			descLabel.TextYAlignment = Enum.TextYAlignment.Top
			descLabel.BackgroundTransparency = 1
			descLabel.Parent = infoFrame
		end
	
		local closeButton = Instance.new("TextButton")
		closeButton.Name = "CloseButton"
		closeButton.Size = UDim2.new(0.3, 0, 0.15, 0)
		closeButton.Position = UDim2.new(0.35, 0, 0.8, 0)
		closeButton.Text = "Close"
		closeButton.Font = Enum.Font.Gotham
		closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		closeButton.BackgroundColor3 = Color3.fromRGB(80, 80, 120)
		closeButton.Parent = infoFrame
	
	
		local tweenService = game:GetService("TweenService")
		local hoverTweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local clickTweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		local frameTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	
	
		Button.TextButton.MouseEnter:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(60, 60, 60),
				BackgroundTransparency = 0
			})
			hoverTween:Play()
		end)
	
		Button.TextButton.MouseLeave:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(45, 45, 45),
				BackgroundTransparency = 0.2
			})
			hoverTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Down:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size - UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
		Button.TextButton.MouseButton1Up:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size + UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Click:Connect(function()
	
			infoFrame.Visible = true
			infoFrame.BackgroundTransparency = 1
			infoFrame.Size = UDim2.new(0, 10, 0, 10)
	
			local openTween1 = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 0,
				Size = UDim2.new(0, 320, 0, 220)
			})
	
			local openTween2 = tweenService:Create(infoFrame, frameTweenInfo, {
				Size = UDim2.new(0, 300, 0, 200)
			})
	
			openTween1:Play()
			openTween1.Completed:Wait()
			openTween2:Play()
	
			if data.HoverText then
				local originalText = Button.TextLabel.Text
				Button.TextLabel.Text = data.HoverText
				task.delay(0.6, function()
					Button.TextLabel.Text = originalText
				end)
			end
	
	
			pcall(data.Callback)
		end)
	
		closeButton.MouseButton1Click:Connect(function()
			local closeTween = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 1,
				Size = UDim2.new(0, 10, 0, 10)
			})
	
			closeTween:Play()
			closeTween.Completed:Wait()
			infoFrame.Visible = false
		end)
	
		return Button
	end
	
	
	function AddToggle(data)
		local Toggle = ToggleTemplate:Clone()
		Toggle.Visible = true
		Toggle.Parent = ScrollFrame
		Toggle.Name = data.Name
		Toggle.TextLabel.Text = data.Name
	
		AutoPositionRight(Toggle)
	
	
		local Circle = Toggle.Toggle
		if not Circle then
			warn("Circle/Slider not found in ToggleTemplate: " .. data.Name)
			return
		end
	
		local state = data.Default or false
	
		local function updateToggleVisual()
	
			local toggleWidth = Toggle.AbsoluteSize.X
			local circleWidth = Circle.AbsoluteSize.X
			local padding = 4 
	
			if state then
	
				Circle:TweenPosition(
					UDim2.new(1, -circleWidth - padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
				Circle.BackgroundColor3 = Color3.fromRGB(52, 255, 6)
			else
	
				Circle:TweenPosition(
					UDim2.new(0, padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
				
				Circle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			end
		end
	
		updateToggleVisual()
	
		Toggle.Toggle.MouseButton1Click:Connect(function()
			state = not state
			updateToggleVisual()
			if data.Callback then
				pcall(data.Callback, state) 
			end
		end)
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--ALL ESSP
	
	local RunService = game:GetService("RunService")
	local Players = game:GetService("Players")
	
	_G.HighlightPlayers = true 
	
	local function hasTool(player, toolName)
		for _, tool in ipairs(player.Backpack:GetChildren()) do
			if tool.Name == toolName then
				return true
			end
		end
		if player.Character then
			for _, tool in ipairs(player.Character:GetChildren()) do
				if tool:IsA("Tool") and tool.Name == toolName then
					return true
				end
			end
		end
		return false
	end
	
	local function highlightPlayer(player)
		if not player.Character then
			return
		end
	
	
		for _, highlight in ipairs(player.Character:GetChildren()) do
			if highlight:IsA("Highlight") then
				highlight:Destroy()
			end
		end
	
		local hasKnife = hasTool(player, "Knife")
		local hasGun = hasTool(player, "Gun")
	
		local highlight = Instance.new("Highlight")
		highlight.Parent = player.Character
		highlight.OutlineColor = Color3.new(0, 0, 0)
		highlight.FillTransparency = 0.7
		highlight.OutlineTransparency = 0.7
	
		if hasKnife then
			highlight.FillColor = Color3.new(1, 0, 0)
		elseif hasGun then
			highlight.FillColor = Color3.new(0, 0, 1)
		else
			highlight.FillColor = Color3.new(0, 1, 0) 
		end
	end
	
	local function updateHighlights()
		if not _G.HighlightPlayers then
			return
		end
	
		for _, player in ipairs(Players:GetPlayers()) do
			highlightPlayer(player)
		end
	end
	
	-- Debounced update function
	local debounce = false
	local function debouncedUpdate()
		if debounce then
			return
		end
		debounce = true
		updateHighlights()
		debounce = false
	end
	
	-- Function to toggle ESP
	local function toggleESP()
		_G.HighlightPlayers = not _G.HighlightPlayers 
	
		if _G.HighlightPlayers then
			debouncedUpdate() 
		else
	
			for _, player in ipairs(Players:GetPlayers()) do
				if player.Character then
					for _, highlight in ipairs(player.Character:GetChildren()) do
						if highlight:IsA("Highlight") then
							highlight:Destroy()
						end
					end
				end
			end
		end
	end
	
	
	Players.PlayerAdded:Connect(function(player)
		player.CharacterAdded:Connect(debouncedUpdate)
		player.Backpack.ChildAdded:Connect(debouncedUpdate)
		player.Backpack.ChildRemoved:Connect(debouncedUpdate)
		debouncedUpdate()
	end)
	
	
	for _, player in ipairs(Players:GetPlayers()) do
		player.CharacterAdded:Connect(debouncedUpdate)
		player.Backpack.ChildAdded:Connect(debouncedUpdate)
		player.Backpack.ChildRemoved:Connect(debouncedUpdate)
		debouncedUpdate()
	end
	
	
	RunService.Heartbeat:Connect(debouncedUpdate)
	
	
	--MURD ESP
	
	local Players = game:GetService("Players")
	
	
	_G.MurderESPEnabled = true 
	
	
	local function hasKnife(player)
	
		for _, tool in ipairs(player.Backpack:GetChildren()) do
			if tool.Name == "Knife" then
				return true
			end
		end
	
		if player.Character then
			for _, tool in ipairs(player.Character:GetChildren()) do
				if tool:IsA("Tool") and tool.Name == "Knife" then
					return true
				end
			end
		end
		return false
	end
	
	
	local function highlightPlayer(player)
		if not player.Character or not _G.MurderESPEnabled then
			return
		end
	
	
		for _, highlight in ipairs(player.Character:GetChildren()) do
			if highlight:IsA("Highlight") then
				highlight:Destroy()
			end
		end
	
	
		if hasKnife(player) then
			local highlight = Instance.new("Highlight")
			highlight.Parent = player.Character
			highlight.FillColor = Color3.new(1, 0, 0) 
			highlight.OutlineColor = Color3.new(0, 0, 0) 
			highlight.FillTransparency = 0.7
			highlight.OutlineTransparency = 0.7
		end
	end
	
	
	local function updateHighlights()
		for _, player in ipairs(Players:GetPlayers()) do
			highlightPlayer(player)
		end
	end
	
	local function toggleMurderESP()
		_G.MurderESPEnabled = not _G.MurderESPEnabled 
	
		if _G.MurderESPEnabled then
			print("Murder ESP enabled")
			updateHighlights() 
		else
			print("Murder ESP disabled")
			for _, player in ipairs(Players:GetPlayers()) do
				if player.Character then
					for _, highlight in ipairs(player.Character:GetChildren()) do
						if highlight:IsA("Highlight") then
							highlight:Destroy()
						end
					end
				end
			end
		end
	end
	
	
	Players.PlayerAdded:Connect(function(player)
		player.CharacterAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildRemoved:Connect(function()
			highlightPlayer(player)
		end)
		highlightPlayer(player) 
	end)
	
	
	for _, player in ipairs(Players:GetPlayers()) do
		player.CharacterAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildRemoved:Connect(function()
			highlightPlayer(player)
		end)
		highlightPlayer(player) 
	end
	
	
	
	
	--SHER ESP
	
	local Players = game:GetService("Players")
	
	
	_G.GunESPEnabled = true 
	
	
	local function hasGun(player)
	
		for _, tool in ipairs(player.Backpack:GetChildren()) do
			if tool.Name == "Gun" then
				return true
			end
		end
	
		if player.Character then
			for _, tool in ipairs(player.Character:GetChildren()) do
				if tool:IsA("Tool") and tool.Name == "Gun" then
					return true
				end
			end
		end
		return false
	end
	
	
	local function highlightPlayer(player)
		if not player.Character or not _G.GunESPEnabled then
			return
		end
	
	
		for _, highlight in ipairs(player.Character:GetChildren()) do
			if highlight:IsA("Highlight") then
				highlight:Destroy()
			end
		end
	
	
		if hasGun(player) then
			local highlight = Instance.new("Highlight")
			highlight.Parent = player.Character
			highlight.FillColor = Color3.new(0, 0, 1) -- Blue for Gun
			highlight.OutlineColor = Color3.new(0, 0, 0) -- Black outline
			highlight.FillTransparency = 0.5 -- Semi-transparent
			highlight.OutlineTransparency = 0.5
		end
	end
	
	
	local function updateHighlights()
		for _, player in ipairs(Players:GetPlayers()) do
			highlightPlayer(player)
		end
	end
	
	-- Function to toggle Gun ESP
	local function toggleGunESP()
		_G.GunESPEnabled = not _G.GunESPEnabled 
	
		if _G.GunESPEnabled then
			print("Gun ESP enabled")
			updateHighlights() 
		else
			print("Gun ESP disabled")
	
			for _, player in ipairs(Players:GetPlayers()) do
				if player.Character then
					for _, highlight in ipairs(player.Character:GetChildren()) do
						if highlight:IsA("Highlight") then
							highlight:Destroy()
						end
					end
				end
			end
		end
	end
	
	
	Players.PlayerAdded:Connect(function(player)
		player.CharacterAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildRemoved:Connect(function()
			highlightPlayer(player)
		end)
		highlightPlayer(player) 
	end)
	
	for _, player in ipairs(Players:GetPlayers()) do
		player.CharacterAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildAdded:Connect(function()
			highlightPlayer(player)
		end)
		player.Backpack.ChildRemoved:Connect(function()
			highlightPlayer(player)
		end)
		highlightPlayer(player) 
	end
	
	_G.HighlightPlayers = false 
	_G.MurderESPEnabled = false  
	_G.GunESPEnabled = false 
	
	
	
	AddToggle({
		Name = "AllESP",
		Title = "All Players ESP",
		Description = "khilight all players",
		Default = false,
		Callback = function(state)
			toggleESP() 
		end
	})
	
	AddToggle({
		Name = "MURDESP",
		Title = "Murderer ESP",
		Description = "hilight murderer",
		Default = false,
		Callback = function(state)
			toggleMurderESP() 
		end
	})
	
	AddToggle({
		Name = "SHERESP",
		Title = "Sheriff ESP",
		Description = "hilight sheriff",
		Default = false,
		Callback = function(state)
			toggleGunESP() 
		end
	})
	AddButton({
		Name = "Remaining",
		Title = "Players Remaining",
		Description = "alive player count",
		Callback = function()
			local Players = game:GetService("Players")
			local ReplicatedStorage = game:GetService("ReplicatedStorage")
			local RunService = game:GetService("RunService")
			local LP = Players.LocalPlayer
	
			local screenGui = LP.PlayerGui:FindFirstChild("AlivePlayersGui") or Instance.new("ScreenGui")
			if not screenGui.Parent then
				screenGui.Name = "AlivePlayersGui"
				screenGui.Parent = LP.PlayerGui
				screenGui.DisplayOrder = 9999
			end
	
	
			local aliveCountLabel = screenGui:FindFirstChild("AliveCountLabel") or Instance.new("TextLabel")
			if not aliveCountLabel.Parent then
				aliveCountLabel.Name = "AliveCountLabel"
				aliveCountLabel.Parent = screenGui
				aliveCountLabel.Size = UDim2.new(0, 200, 0, 50)
				aliveCountLabel.Position = UDim2.new(0.5, -100, 0, 10)
				aliveCountLabel.AnchorPoint = Vector2.new(0.5, 0)
				aliveCountLabel.BackgroundTransparency = 1
				aliveCountLabel.TextColor3 = Color3.new(0, 1, 0)
				aliveCountLabel.TextSize = 24
				aliveCountLabel.Text = "Alive Players: 0"
				aliveCountLabel.Font = Enum.Font.SourceSansBold
			end
	
			local function IsAlive(player, roles)
				for name, data in pairs(roles) do
					if name == player.Name then
						return not data.Killed and not data.Dead
					end
				end
				return false
			end
	
			local function UpdateAliveCount()
				local success, roles = pcall(function()
					return ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
				end)
				if not success or not roles then
					aliveCountLabel.Text = "Alive Players: N/A"
					return
				end
	
				local aliveCount = 0
				for _, player in pairs(Players:GetPlayers()) do
					if IsAlive(player, roles) then
						aliveCount = aliveCount + 1
					end
				end
	
				aliveCountLabel.Text = "Alive Players: " .. aliveCount
			end
	
	
			local lastUpdate = 0
			RunService.RenderStepped:Connect(function(deltaTime)
				lastUpdate = lastUpdate + deltaTime
				if lastUpdate >= 0.5 then
					UpdateAliveCount()
					lastUpdate = 0
				end
			end)
		end,
		HoverText = "count alive players" 
	})
end
coroutine.wrap(QNTEM_fake_script)()
local function OBAEYGS_fake_script() -- ToggleTest_2.LocalScript 
	local script = Instance.new('LocalScript', ToggleTest_2)

	--[[
		Toggle Animation Script
		
		Instructions:
		1. Create a 'LocalScript' inside your "ToggleTest" frame.
		2. Paste all of this code into that 'LocalScript'.
		3. Your "ToggleTest" frame should contain a background frame (e.g., "Frame 1") 
		   and a TextButton named "Toggle".
		4. That's it! This script works without changing the default AnchorPoint.
	]]
	
	-- Services
	local TweenService = game:GetService("TweenService")
	
	-- UI Elements
	-- This LocalScript should be placed directly inside your "ToggleTest" frame.
	local toggleFrame = script.Parent 
	
	-- This script assumes your background is named "Frame 1" and the button is a TextButton named "Toggle".
	local background = toggleFrame:WaitForChild("Frame 1") -- The background of the switch
	local toggleButton = toggleFrame:WaitForChild("Toggle") -- The part that moves
	
	-- ==================================
	--        CONFIGURATION
	-- ==================================
	
	local TWEEN_DURATION = 0.2 -- How long the animation takes in seconds
	local EasingStyle = Enum.EasingStyle.Quint -- The style of the animation curve (smoothness)
	local EasingDirection = Enum.EasingDirection.Out -- The direction of the animation curve
	
	-- How much space to leave on the left/right of the toggle button. 
	-- 0.05 means 5% of the background's width. Set to 0 for no padding.
	local PADDING_SCALE = 0.05 
	
	-- NEW VARIABLE: Controls how far the button travels across the background.
	-- 1.0 = travels the full available distance.
	-- 0.5 = travels half the available distance.
	-- Set this to a smaller number to reduce how far it moves.
	local TRAVEL_DISTANCE_SCALE = 0.57
	
	-- Colors for ON/OFF states (You can change these RGB values)
	local ON_COLOR = Color3.fromRGB(75, 181, 67)   -- A nice green when ON
	local OFF_COLOR = Color3.fromRGB(57, 57, 57) -- Dark grey when OFF
	
	-- ==================================
	--        SCRIPT LOGIC
	-- ==================================
	
	-- State Variable
	local isToggled = false -- 'false' means it starts in the OFF state
	
	-- Tween Information (This combines the duration and easing settings for the animation)
	local tweenInfo = TweenInfo.new(TWEEN_DURATION, EasingStyle, EasingDirection)
	
	-- Function to update the toggle's visual state based on the 'isToggled' variable
	local function updateToggleState()
		local goalPosition
		local goalColor
	
		-- We read the button's current Y position to avoid messing up your vertical alignment.
		local currentYPosition = toggleButton.Position.Y
	
		-- Define the start and end points of the toggle's path
		local startX = PADDING_SCALE
		local endX = 1 - toggleButton.Size.X.Scale - PADDING_SCALE
	
		-- Calculate the total distance the button can possibly travel
		local travelableDistance = endX - startX
	
		if isToggled then
			-- Set the goals for the "ON" state
			goalColor = ON_COLOR
	
			-- Calculate the final "ON" position based on the travel distance modifier
			local onX = startX + (travelableDistance * TRAVEL_DISTANCE_SCALE)
			goalPosition = UDim2.new(onX, 0, currentYPosition.Scale, currentYPosition.Offset)
		else
			-- Set the goals for the "OFF" state
			goalColor = OFF_COLOR
	
			-- The "OFF" position is the starting position.
			goalPosition = UDim2.new(startX, 0, currentYPosition.Scale, currentYPosition.Offset)
		end
	
		-- Create the animations (Tweens) for position and color
		local positionTween = TweenService:Create(toggleButton, tweenInfo, { Position = goalPosition })
		local colorTween = TweenService:Create(background, tweenInfo, { BackgroundColor3 = goalColor })
	
		-- Play the animations simultaneously
		positionTween:Play()
		colorTween:Play()
	end
	
	-- This function runs whenever the "Toggle" TextButton is clicked
	toggleButton.MouseButton1Click:Connect(function()
		-- Flip the state from on-to-off or off-to-on
		isToggled = not isToggled
	
		-- Run the animation function to update the visuals
		updateToggleState()
	
		-- You can add your other code here to make the toggle actually do something
		if isToggled then
			print(toggleFrame.Name .. " was toggled ON")
			-- Example: game.Workspace.SomePart.Transparency = 0
		else
			print(toggleFrame.Name .. " was toggled OFF")
			-- Example: game.Workspace.SomePart.Transparency = 1
		end
	end)
	
	-- Set the initial visual state to OFF when the game starts or UI loads
	task.wait() -- Add a tiny delay to ensure the UI has loaded its properties correctly
	updateToggleState()
	
end
coroutine.wrap(OBAEYGS_fake_script)()
local function OOKCLM_fake_script() -- combat.functions 
	local script = Instance.new('LocalScript', combat)

	local ScrollFrame = script.Parent.ScrollFrame
	local ButtonTemplate = ScrollFrame.ESP
	local ToggleTemplate = ScrollFrame.ToggleTest
	
	-- Positioning variables
	local spacing = 10
	local elementWidth = 150
	local elementHeight = 40
	local startX = 0  -- Start at x=0
	local currentX = startX
	local currentY = 0  -- Start at y=0
	
	function AutoPositionRight(uiElement)
		uiElement.Position = UDim2.new(0, currentX, 0, currentY)
		uiElement.Size = UDim2.new(0, elementWidth, 0, elementHeight)
	
		currentX = currentX + elementWidth + spacing  
	
		if currentX + elementWidth > ScrollFrame.AbsoluteSize.X then
			currentX = 0  
			currentY = currentY + elementHeight + spacing
		end
	end
	
	-- AddButton function
	function AddButton(data)
	
		local Button = ButtonTemplate:Clone()
		Button.Visible = true
		Button.Parent = ScrollFrame
		Button.Name = data.Name
	
	
		Button.TextLabel.Text = data.Name
		Button.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		Button.BackgroundTransparency = 0.2
	
		AutoPositionRight(Button)
	
	
		local infoFrame = Instance.new("Frame")
		infoFrame.Name = "InfoFrame"
		infoFrame.Size = UDim2.new(0, 300, 0, 200)
		infoFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
		infoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
		infoFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		infoFrame.BackgroundTransparency = 1
		infoFrame.Visible = false
		infoFrame.Parent = script.Parent 
	
	
		local gradient = Instance.new("UIGradient")
		gradient.Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 50))
		}
		gradient.Rotation = 90
		gradient.Parent = infoFrame
	
	
		local titleLabel = Instance.new("TextLabel")
		titleLabel.Name = "TitleLabel"
		titleLabel.Size = UDim2.new(0.9, 0, 0.15, 0)
		titleLabel.Position = UDim2.new(0.05, 0, 0.05, 0)
		titleLabel.Text = data.Name
		titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.TextScaled = true
		titleLabel.Font = Enum.Font.GothamBold
		titleLabel.BackgroundTransparency = 1
		titleLabel.Parent = infoFrame
	
	
		if data.Description then
			local descLabel = Instance.new("TextLabel")
			descLabel.Name = "DescriptionLabel"
			descLabel.Size = UDim2.new(0.9, 0, 0.6, 0)
			descLabel.Position = UDim2.new(0.05, 0, 0.25, 0)
			descLabel.Text = data.Description
			descLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
			descLabel.TextWrapped = true
			descLabel.TextXAlignment = Enum.TextXAlignment.Left
			descLabel.TextYAlignment = Enum.TextYAlignment.Top
			descLabel.BackgroundTransparency = 1
			descLabel.Parent = infoFrame
		end
	
		local closeButton = Instance.new("TextButton")
		closeButton.Name = "CloseButton"
		closeButton.Size = UDim2.new(0.3, 0, 0.15, 0)
		closeButton.Position = UDim2.new(0.35, 0, 0.8, 0)
		closeButton.Text = "Close"
		closeButton.Font = Enum.Font.Gotham
		closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		closeButton.BackgroundColor3 = Color3.fromRGB(80, 80, 120)
		closeButton.Parent = infoFrame
	
	
		local tweenService = game:GetService("TweenService")
		local hoverTweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local clickTweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		local frameTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	
	
		Button.TextButton.MouseEnter:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(60, 60, 60),
				BackgroundTransparency = 0
			})
			hoverTween:Play()
		end)
	
		Button.TextButton.MouseLeave:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(45, 45, 45),
				BackgroundTransparency = 0.2
			})
			hoverTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Down:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size - UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
		Button.TextButton.MouseButton1Up:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size + UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Click:Connect(function()
	
			infoFrame.Visible = true
			infoFrame.BackgroundTransparency = 1
			infoFrame.Size = UDim2.new(0, 10, 0, 10)
	
			local openTween1 = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 0,
				Size = UDim2.new(0, 320, 0, 220)
			})
	
			local openTween2 = tweenService:Create(infoFrame, frameTweenInfo, {
				Size = UDim2.new(0, 300, 0, 200)
			})
	
			openTween1:Play()
			openTween1.Completed:Wait()
			openTween2:Play()
	
			if data.HoverText then
				local originalText = Button.TextLabel.Text
				Button.TextLabel.Text = data.HoverText
				task.delay(0.6, function()
					Button.TextLabel.Text = originalText
				end)
			end
	
	
			pcall(data.Callback)
		end)
	
		closeButton.MouseButton1Click:Connect(function()
			local closeTween = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 1,
				Size = UDim2.new(0, 10, 0, 10)
			})
	
			closeTween:Play()
			closeTween.Completed:Wait()
			infoFrame.Visible = false
		end)
	
		return Button
	end
	
	
	function AddToggle(data)
		local Toggle = ToggleTemplate:Clone()
		Toggle.Visible = true
		Toggle.Parent = ScrollFrame
		Toggle.Name = data.Name
		Toggle.TextLabel.Text = data.Name
	
		AutoPositionRight(Toggle)
	
	
		local Circle = Toggle.Toggle
		if not Circle then
			warn("Circle/Slider not found in ToggleTemplate: " .. data.Name)
			return
		end
	
		local state = data.Default or false
	
		local function updateToggleVisual()
	
			local toggleWidth = Toggle.AbsoluteSize.X
			local circleWidth = Circle.AbsoluteSize.X
			local padding = 4 
	
			if state then
	
				Circle:TweenPosition(
					UDim2.new(1, -circleWidth - padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
				Circle.BackgroundColor3 = Color3.fromRGB(52, 255, 6)
			else
	
				Circle:TweenPosition(
					UDim2.new(0, padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
				
				Circle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			end
		end
	
		updateToggleVisual()
	
		Toggle.Toggle.MouseButton1Click:Connect(function()
			state = not state
			updateToggleVisual()
			if data.Callback then
				pcall(data.Callback, state) 
			end
		end)
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	
	
	
	
	
	AddButton({
		Name = "K Sher",
		HoverText = "kill it",
		Description = "kill sheriff as murderer",
		Callback = function()
			local localPlayer = game:GetService("Players").LocalPlayer
	
	
			local function findCharacterWithTool(toolName)
				for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
					if player and player.Character and (player.Character:FindFirstChild(toolName) or player.Backpack:FindFirstChild(toolName)) then
						return player
					end
				end
				return nil
			end
	
	
			local murderer = findCharacterWithTool("Knife")
			if murderer ~= localPlayer or not localPlayer.Character then
	
				return
			end
	
	
			if not localPlayer.Character:FindFirstChild("Knife") then
				if localPlayer.Backpack:FindFirstChild("Knife") then
					localPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(localPlayer.Backpack.Knife)
					task.wait(0.1) 
				else
	
					return
				end
			end
	
			local sheriff = findCharacterWithTool("Gun")
			if not (sheriff and sheriff.Character and sheriff.Character:FindFirstChild("HumanoidRootPart")) then
	
				return
			end
	
	
			local sheriffHRP = sheriff.Character.HumanoidRootPart
			local playerHRP = localPlayer.Character:FindFirstChild("HumanoidRootPart")
	
			if playerHRP and localPlayer.Character:FindFirstChild("Knife") then
				sheriffHRP.CFrame = playerHRP.CFrame + playerHRP.CFrame.LookVector * 2
				task.wait(0.1)
				localPlayer.Character.Knife.Stab:FireServer("Slash")
			end
		end
	})
	
	AddButton({
		Name = "K All",
		HoverText = "kill them.",
		Description = "kill all as murderer",
		Callback = function()
	
			 if _G.awid38r732rhnfd8332 == false then return end
			game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "premium only"})
			local localPlayer = game:GetService("Players").LocalPlayer
	
	
			local function isMurderer()
				return localPlayer.Character and (localPlayer.Character:FindFirstChild("Knife") or localPlayer.Backpack:FindFirstChild("Knife"))
			end
	
	
			if not isMurderer() or not localPlayer.Character then return end
			if not localPlayer.Character:FindFirstChild("Knife") and localPlayer.Backpack:FindFirstChild("Knife") then
				localPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(localPlayer.Backpack.Knife)
				task.wait(0.1)
			end
	
	
			local playerHRP = localPlayer.Character:FindFirstChild("HumanoidRootPart")
			if not playerHRP or not localPlayer.Character:FindFirstChild("Knife") then return end
	
			for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
				if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
					player.Character.HumanoidRootPart.CFrame = playerHRP.CFrame + playerHRP.CFrame.LookVector * 2
				end
			end
	
	
			task.wait(0.1)
			localPlayer.Character.Knife.Stab:FireServer("Slash")
		end
	})
	
	_G.limitz = true 
	
	AddButton({
		Name = "KillRD",
		HoverText = "kill it.",
		Description = "kill random player as murderer",
		Callback = function()
	
			local function doKillRandom()
				local localPlayer = game:GetService("Players").LocalPlayer
				if not localPlayer.Character then return end
	
				local function isMurderer()
					return (localPlayer.Character and localPlayer.Character:FindFirstChild("Knife")) or localPlayer.Backpack:FindFirstChild("Knife")
				end
	
				if not isMurderer() then return end
				if not localPlayer.Character:FindFirstChild("Knife") and localPlayer.Backpack:FindFirstChild("Knife") then
					localPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(localPlayer.Backpack.Knife)
					task.wait(0.1)
				end
	
				local validTargets = {}
				for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
					if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
						table.insert(validTargets, player)
					end
				end
	
				if #validTargets > 0 then
					local randomPlayer = validTargets[math.random(1, #validTargets)]
					local playerHRP = localPlayer.Character:FindFirstChild("HumanoidRootPart")
					if playerHRP and localPlayer.Character:FindFirstChild("Knife") then
						randomPlayer.Character.HumanoidRootPart.CFrame = playerHRP.CFrame + playerHRP.CFrame.LookVector * 2
						task.wait(0.1)
						localPlayer.Character.Knife.Stab:FireServer("Slash")
					end
				end
			end
	
	
			if _G.awid38r732rhnfd8332 == true then
				doKillRandom()
			else
				if _G.limitz == false then
					_G.limitz = true
					doKillRandom()
					task.wait(10)
					_G.limitz = false
				else
	
				end
			end
		end
	})
	
	AddButton({
		Name = "S Murd",
		HoverText = "shoot it.",
		Description = "shoots murderer as sheriff",
		Callback = function()
			local localPlayer = game:GetService("Players").LocalPlayer
	
			-- Utility functions to find roles
			local function findCharacterWithTool(toolName, excludePlayer)
				for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
					if player ~= excludePlayer and player.Character and (player.Character:FindFirstChild(toolName) or player.Backpack:FindFirstChild(toolName)) then
						return player
					end
				end
				return nil
			end
	
			local sheriff = findCharacterWithTool("Gun")
			if sheriff ~= localPlayer or not localPlayer.Character then return end
	
	
			if not localPlayer.Character:FindFirstChild("Gun") and localPlayer.Backpack:FindFirstChild("Gun") then
				localPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(localPlayer.Backpack.Gun)
				task.wait(0.1)
			end
	
	
			local murderer = findCharacterWithTool("Knife")
			if not (murderer and murderer.Character and murderer.Character:FindFirstChild("UpperTorso")) then
				return
			end
	
	
			if localPlayer.Character:FindFirstChild("Gun") then
	
				local torsoPos = murderer.Character.UpperTorso.Position
				local velocity = murderer.Character.UpperTorso.AssemblyLinearVelocity
				local moveDir = murderer.Character:FindFirstChildOfClass("Humanoid").MoveDirection
				local shootOffset = 2.8
				local predictedPosition = torsoPos + (velocity * Vector3.new(0, 0.5, 0) * (shootOffset / 15)) + (moveDir * shootOffset)
	
				localPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(1, predictedPosition, "AH2")
			end
		end
	})
	
	AddButton({
		Name = "Instant SM",
		HoverText = "shoot it.",
		Description = "teleports to murderer and shoots it",
		Callback = function()
			local localPlayer = game:GetService("Players").LocalPlayer
	
			local function findCharacterWithTool(toolName, excludePlayer)
				for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
					if player ~= excludePlayer and player.Character and (player.Character:FindFirstChild(toolName) or player.Backpack:FindFirstChild(toolName)) then
						return player
					end
				end
				return nil
			end
	
			local sheriff = findCharacterWithTool("Gun")
			if sheriff ~= localPlayer or not localPlayer.Character or not localPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
	
			if not localPlayer.Character:FindFirstChild("Gun") and localPlayer.Backpack:FindFirstChild("Gun") then
				localPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(localPlayer.Backpack.Gun)
				task.wait(0.1)
			end
	
			local murderer = findCharacterWithTool("Knife")
			if not (murderer and murderer.Character and murderer.Character:FindFirstChild("HumanoidRootPart")) then
				return
			end
	
			if localPlayer.Character:FindFirstChild("Gun") then
				local murdererHRP = murderer.Character.HumanoidRootPart
				local predictedPosition = murderer.Character.UpperTorso.Position 
	
				-- Teleport behind the murderer
				localPlayer.Character.HumanoidRootPart.CFrame = murdererHRP.CFrame * CFrame.new(0, 0, 5)
				task.wait(0.1)
	
				localPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(1, predictedPosition, "AH2")
			end
		end
	})
end
coroutine.wrap(OOKCLM_fake_script)()
local function IYUGDD_fake_script() -- ToggleTest_3.LocalScript 
	local script = Instance.new('LocalScript', ToggleTest_3)

	--[[
		Toggle Animation Script
		
		Instructions:
		1. Create a 'LocalScript' inside your "ToggleTest" frame.
		2. Paste all of this code into that 'LocalScript'.
		3. Your "ToggleTest" frame should contain a background frame (e.g., "Frame 1") 
		   and a TextButton named "Toggle".
		4. That's it! This script works without changing the default AnchorPoint.
	]]
	
	-- Services
	local TweenService = game:GetService("TweenService")
	
	-- UI Elements
	-- This LocalScript should be placed directly inside your "ToggleTest" frame.
	local toggleFrame = script.Parent 
	
	-- This script assumes your background is named "Frame 1" and the button is a TextButton named "Toggle".
	local background = toggleFrame:WaitForChild("Frame 1") -- The background of the switch
	local toggleButton = toggleFrame:WaitForChild("Toggle") -- The part that moves
	
	-- ==================================
	--        CONFIGURATION
	-- ==================================
	
	local TWEEN_DURATION = 0.2 -- How long the animation takes in seconds
	local EasingStyle = Enum.EasingStyle.Quint -- The style of the animation curve (smoothness)
	local EasingDirection = Enum.EasingDirection.Out -- The direction of the animation curve
	
	-- How much space to leave on the left/right of the toggle button. 
	-- 0.05 means 5% of the background's width. Set to 0 for no padding.
	local PADDING_SCALE = 0.05 
	
	-- NEW VARIABLE: Controls how far the button travels across the background.
	-- 1.0 = travels the full available distance.
	-- 0.5 = travels half the available distance.
	-- Set this to a smaller number to reduce how far it moves.
	local TRAVEL_DISTANCE_SCALE = 0.57
	
	-- Colors for ON/OFF states (You can change these RGB values)
	local ON_COLOR = Color3.fromRGB(75, 181, 67)   -- A nice green when ON
	local OFF_COLOR = Color3.fromRGB(57, 57, 57) -- Dark grey when OFF
	
	-- ==================================
	--        SCRIPT LOGIC
	-- ==================================
	
	-- State Variable
	local isToggled = false -- 'false' means it starts in the OFF state
	
	-- Tween Information (This combines the duration and easing settings for the animation)
	local tweenInfo = TweenInfo.new(TWEEN_DURATION, EasingStyle, EasingDirection)
	
	-- Function to update the toggle's visual state based on the 'isToggled' variable
	local function updateToggleState()
		local goalPosition
		local goalColor
	
		-- We read the button's current Y position to avoid messing up your vertical alignment.
		local currentYPosition = toggleButton.Position.Y
	
		-- Define the start and end points of the toggle's path
		local startX = PADDING_SCALE
		local endX = 1 - toggleButton.Size.X.Scale - PADDING_SCALE
	
		-- Calculate the total distance the button can possibly travel
		local travelableDistance = endX - startX
	
		if isToggled then
			-- Set the goals for the "ON" state
			goalColor = ON_COLOR
	
			-- Calculate the final "ON" position based on the travel distance modifier
			local onX = startX + (travelableDistance * TRAVEL_DISTANCE_SCALE)
			goalPosition = UDim2.new(onX, 0, currentYPosition.Scale, currentYPosition.Offset)
		else
			-- Set the goals for the "OFF" state
			goalColor = OFF_COLOR
	
			-- The "OFF" position is the starting position.
			goalPosition = UDim2.new(startX, 0, currentYPosition.Scale, currentYPosition.Offset)
		end
	
		-- Create the animations (Tweens) for position and color
		local positionTween = TweenService:Create(toggleButton, tweenInfo, { Position = goalPosition })
		local colorTween = TweenService:Create(background, tweenInfo, { BackgroundColor3 = goalColor })
	
		-- Play the animations simultaneously
		positionTween:Play()
		colorTween:Play()
	end
	
	-- This function runs whenever the "Toggle" TextButton is clicked
	toggleButton.MouseButton1Click:Connect(function()
		-- Flip the state from on-to-off or off-to-on
		isToggled = not isToggled
	
		-- Run the animation function to update the visuals
		updateToggleState()
	
		-- You can add your other code here to make the toggle actually do something
		if isToggled then
			print(toggleFrame.Name .. " was toggled ON")
			-- Example: game.Workspace.SomePart.Transparency = 0
		else
			print(toggleFrame.Name .. " was toggled OFF")
			-- Example: game.Workspace.SomePart.Transparency = 1
		end
	end)
	
	-- Set the initial visual state to OFF when the game starts or UI loads
	task.wait() -- Add a tiny delay to ensure the UI has loaded its properties correctly
	updateToggleState()
	
end
coroutine.wrap(IYUGDD_fake_script)()
local function EWAWT_fake_script() -- troll.functions 
	local script = Instance.new('LocalScript', troll)

	local ScrollFrame = script.Parent.ScrollFrame
	local ButtonTemplate = ScrollFrame.ESP
	local ToggleTemplate = ScrollFrame.ToggleTest
	
	-- Positioning variables
	local spacing = 10
	local elementWidth = 150
	local elementHeight = 40
	local startX = 0  -- Start at x=0
	local currentX = startX
	local currentY = 0  -- Start at y=0
	
	function AutoPositionRight(uiElement)
		uiElement.Position = UDim2.new(0, currentX, 0, currentY)
		uiElement.Size = UDim2.new(0, elementWidth, 0, elementHeight)
	
		currentX = currentX + elementWidth + spacing  
	
		if currentX + elementWidth > ScrollFrame.AbsoluteSize.X then
			currentX = 0  
			currentY = currentY + elementHeight + spacing
		end
	end
	
	-- AddButton function
	function AddButton(data)
	
		local Button = ButtonTemplate:Clone()
		Button.Visible = true
		Button.Parent = ScrollFrame
		Button.Name = data.Name
	
	
		Button.TextLabel.Text = data.Name
		Button.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		Button.BackgroundTransparency = 0.2
	
		AutoPositionRight(Button)
	
	
		local infoFrame = Instance.new("Frame")
		infoFrame.Name = "InfoFrame"
		infoFrame.Size = UDim2.new(0, 300, 0, 200)
		infoFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
		infoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
		infoFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		infoFrame.BackgroundTransparency = 1
		infoFrame.Visible = false
		infoFrame.Parent = script.Parent 
	
	
		local gradient = Instance.new("UIGradient")
		gradient.Color = ColorSequence.new{
			ColorSequenceKeypoint.new(0, Color3.fromRGB(50, 50, 80)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 50))
		}
		gradient.Rotation = 90
		gradient.Parent = infoFrame
	
	
		local titleLabel = Instance.new("TextLabel")
		titleLabel.Name = "TitleLabel"
		titleLabel.Size = UDim2.new(0.9, 0, 0.15, 0)
		titleLabel.Position = UDim2.new(0.05, 0, 0.05, 0)
		titleLabel.Text = data.Name
		titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.TextScaled = true
		titleLabel.Font = Enum.Font.GothamBold
		titleLabel.BackgroundTransparency = 1
		titleLabel.Parent = infoFrame
	
	
		if data.Description then
			local descLabel = Instance.new("TextLabel")
			descLabel.Name = "DescriptionLabel"
			descLabel.Size = UDim2.new(0.9, 0, 0.6, 0)
			descLabel.Position = UDim2.new(0.05, 0, 0.25, 0)
			descLabel.Text = data.Description
			descLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
			descLabel.TextWrapped = true
			descLabel.TextXAlignment = Enum.TextXAlignment.Left
			descLabel.TextYAlignment = Enum.TextYAlignment.Top
			descLabel.BackgroundTransparency = 1
			descLabel.Parent = infoFrame
		end
	
		local closeButton = Instance.new("TextButton")
		closeButton.Name = "CloseButton"
		closeButton.Size = UDim2.new(0.3, 0, 0.15, 0)
		closeButton.Position = UDim2.new(0.35, 0, 0.8, 0)
		closeButton.Text = "Close"
		closeButton.Font = Enum.Font.Gotham
		closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		closeButton.BackgroundColor3 = Color3.fromRGB(80, 80, 120)
		closeButton.Parent = infoFrame
	
	
		local tweenService = game:GetService("TweenService")
		local hoverTweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local clickTweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		local frameTweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	
	
		Button.TextButton.MouseEnter:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(60, 60, 60),
				BackgroundTransparency = 0
			})
			hoverTween:Play()
		end)
	
		Button.TextButton.MouseLeave:Connect(function()
			local hoverTween = tweenService:Create(Button, hoverTweenInfo, {
				BackgroundColor3 = Color3.fromRGB(45, 45, 45),
				BackgroundTransparency = 0.2
			})
			hoverTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Down:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size - UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
		Button.TextButton.MouseButton1Up:Connect(function()
			local clickTween = tweenService:Create(Button, clickTweenInfo, {
				Size = Button.Size + UDim2.new(0, 5, 0, 5)
			})
			clickTween:Play()
		end)
	
	
		Button.TextButton.MouseButton1Click:Connect(function()
	
			infoFrame.Visible = true
			infoFrame.BackgroundTransparency = 1
			infoFrame.Size = UDim2.new(0, 10, 0, 10)
	
			local openTween1 = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 0,
				Size = UDim2.new(0, 320, 0, 220)
			})
	
			local openTween2 = tweenService:Create(infoFrame, frameTweenInfo, {
				Size = UDim2.new(0, 300, 0, 200)
			})
	
			openTween1:Play()
			openTween1.Completed:Wait()
			openTween2:Play()
	
			if data.HoverText then
				local originalText = Button.TextLabel.Text
				Button.TextLabel.Text = data.HoverText
				task.delay(0.6, function()
					Button.TextLabel.Text = originalText
				end)
			end
	
	
			pcall(data.Callback)
		end)
	
		closeButton.MouseButton1Click:Connect(function()
			local closeTween = tweenService:Create(infoFrame, frameTweenInfo, {
				BackgroundTransparency = 1,
				Size = UDim2.new(0, 10, 0, 10)
			})
	
			closeTween:Play()
			closeTween.Completed:Wait()
			infoFrame.Visible = false
		end)
	
		return Button
	end
	
	function AddToggle(data)
		local Toggle = ToggleTemplate:Clone()
		Toggle.Visible = true
		Toggle.Parent = ScrollFrame
		Toggle.Name = data.Name
		Toggle.TextLabel.Text = data.Name
	
		AutoPositionRight(Toggle)
	
	
		local Circle = Toggle.Toggle
		if not Circle then
			warn("Circle/Slider not found in ToggleTemplate: " .. data.Name)
			return
		end
	
		local state = data.Default or false
	
		local function updateToggleVisual()
	
			local toggleWidth = Toggle.AbsoluteSize.X
			local circleWidth = Circle.AbsoluteSize.X
			local padding = 4 
	
			if state then
	
				Circle:TweenPosition(
					UDim2.new(1, -circleWidth - padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
				Circle.BackgroundColor3 = Color3.fromRGB(52, 255, 6)
			else
	
				Circle:TweenPosition(
					UDim2.new(0, padding, 0.77, -Circle.AbsoluteSize.Y / 2),
					Enum.EasingDirection.Out,
					Enum.EasingStyle.Quad,
					0.2,
					true
				)
				
				Circle.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
			end
		end
	
		updateToggleVisual()
	
		Toggle.Toggle.MouseButton1Click:Connect(function()
			state = not state
			updateToggleVisual()
			if data.Callback then
				pcall(data.Callback, state) 
			end
		end)
	end
	
	
	
	
	
	
	
	
	
	
	
	
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	--MAIN FUNC!!!!!
	
	AddButton({
		Name = "Dab",
		HoverText = "use this emote",
		Description = "use this emote",
		Callback = function()
			game.ReplicatedStorage.Remotes.Misc.PlayEmote:Fire("dab")
		end
	})
	
	AddButton({
		Name = "Floss",
		HoverText = "use this emote",
		Description = "use this emote",
		Callback = function()
			game.ReplicatedStorage.Remotes.Misc.PlayEmote:Fire("floss")
		end
	})
	
	AddButton({
		Name = "HeadLess",
		HoverText = "use this emote",
		Description = "use this emote",
		Callback = function()
			game.ReplicatedStorage.Remotes.Misc.PlayEmote:Fire("headless")
		end
	})
	
	AddButton({
		Name = "Ninja",
		HoverText = "use this emote",
		Description = "use this emote",
		Callback = function()
			game.ReplicatedStorage.Remotes.Misc.PlayEmote:Fire("ninja")
		end
	})
	
	AddButton({
		Name = "Sit",
		HoverText = "use this emote",
		Description = "use this emote",
		Callback = function()
			game.ReplicatedStorage.Remotes.Misc.PlayEmote:Fire("sit")
		end
	})
	
	AddButton({
		Name = "Zen",
		HoverText = "use this emote",
		Description = "use this emote",
		Callback = function()
			game.ReplicatedStorage.Remotes.Misc.PlayEmote:Fire("zen")
		end
	})
	
	local Players = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local LocalPlayer = Players.LocalPlayer
	
	local teleporting = false
	local connection
	
	
	AddToggle({
		Name = "Bring All",
		Default = false,
		Callback = function(state)
			if _G.awid38r732rhnfd8332 == false then
				game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "premium only"})
			else
			teleporting = state
			if teleporting then
				connection = RunService.Heartbeat:Connect(function()
					for _, player in ipairs(Players:GetPlayers()) do
						if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
							local hrp = player.Character.HumanoidRootPart
							local myChar = LocalPlayer.Character
							if myChar and myChar:FindFirstChild("HumanoidRootPart") then
								hrp.CFrame = myChar.HumanoidRootPart.CFrame + Vector3.new(0, 5, 0)
							end
						end
					end
				end)
			else
				if connection then
					connection:Disconnect()
					connection = nil
				end
			end
			end
		end
	})
	
	AddButton({
		Name = "fling all",
		HoverText = "flings all",
		Description = "this function flings all players out the map",
		Callback = function()
			if _G.awid38r732rhnfd8332 == false then
				game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "premium only"})
			else
				local Players = game:GetService("Players")
				local RunService = game:GetService("RunService")
				local lp = Players.LocalPlayer
				local lpChar = lp.Character or lp.CharacterAdded:Wait()
				local lpHRP = lpChar:WaitForChild("HumanoidRootPart")
	
	
				local thrust = Instance.new("BodyThrust")
				thrust.Name = "YeetForce"
				thrust.Force = Vector3.new(9999, 9999, 9999)
				thrust.Parent = lpHRP
	
	
				local function flingPlayer(targetPlayer)
					local targetChar = targetPlayer.Character
					if not targetChar then return end
					local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
					if not targetHRP then return end
	
					local conn
					conn = RunService.Heartbeat:Connect(function()
						if not targetChar:FindFirstChild("Head") then
							conn:Disconnect()
							return
						end
	
	
						lpHRP.CFrame = targetHRP.CFrame
						thrust.Location = targetHRP.Position
					end)
				end
	
	
				for _, player in pairs(Players:GetPlayers()) do
					if player ~= lp then
						coroutine.wrap(flingPlayer)(player)
					end
				end
	
			end
		end
	})
	AddButton({
		Name = "fling murd",
		HoverText = "flings murderer",
		Description = "this function murderer out the map",
		Callback = function()
			if _G.awid38r732rhnfd8332 == false then
				game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "premium only"})
			else
				local Players = game:GetService("Players")
				local RunService = game:GetService("RunService")
				local lp = Players.LocalPlayer
				local lpChar = lp.Character or lp.CharacterAdded:Wait()
				local lpHRP = lpChar:WaitForChild("HumanoidRootPart")
	
				local thrust = Instance.new("BodyThrust")
				thrust.Name = "YeetForce"
				thrust.Force = Vector3.new(9999, 9999, 9999)
				thrust.Parent = lpHRP
	
	
				local function hasKnife(player)
					if player.Backpack:FindFirstChild("Knife") then
						return true
					end
					local char = player.Character
					if char and char:FindFirstChild("Knife") then
						return true
					end
					return false
				end
	
	
				local function flingPlayer(targetPlayer)
					local targetChar = targetPlayer.Character
					if not targetChar then return end
					local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
					if not targetHRP then return end
	
					local conn
					conn = RunService.Heartbeat:Connect(function()
						if not targetChar:FindFirstChild("Head") then
							conn:Disconnect()
							return
						end
	
						lpHRP.CFrame = targetHRP.CFrame
						thrust.Location = targetHRP.Position
					end)
				end
	
				for _, player in pairs(Players:GetPlayers()) do
					if player ~= lp and hasKnife(player) then
						coroutine.wrap(flingPlayer)(player)
					end
				end
	
	
	
			end
		end
	})
	AddButton({
		Name = "fling sher",
		HoverText = "flings sheriff",
		Description = "this function sheriff out the map",
		Callback = function()
			if _G.awid38r732rhnfd8332 == false then
				game.StarterGui:SetCore("SendNotification", {Title = "WARNING",Duration = 10,Text = "premium only"})
			else
				local Players = game:GetService("Players")
				local RunService = game:GetService("RunService")
				local lp = Players.LocalPlayer
				local lpChar = lp.Character or lp.CharacterAdded:Wait()
				local lpHRP = lpChar:WaitForChild("HumanoidRootPart")
	
				local thrust = Instance.new("BodyThrust")
				thrust.Name = "YeetForce"
				thrust.Force = Vector3.new(9999, 9999, 9999)
				thrust.Parent = lpHRP
	
	
				local function hasKnife(player)
					if player.Backpack:FindFirstChild("Gun") then
						return true
					end
					local char = player.Character
					if char and char:FindFirstChild("Gun") then
						return true
					end
					return false
				end
	
	
				local function flingPlayer(targetPlayer)
					local targetChar = targetPlayer.Character
					if not targetChar then return end
					local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
					if not targetHRP then return end
	
					local conn
					conn = RunService.Heartbeat:Connect(function()
						if not targetChar:FindFirstChild("Head") then
							conn:Disconnect()
							return
						end
	
						lpHRP.CFrame = targetHRP.CFrame
						thrust.Location = targetHRP.Position
					end)
				end
	
				for _, player in pairs(Players:GetPlayers()) do
					if player ~= lp and hasKnife(player) then
						coroutine.wrap(flingPlayer)(player)
					end
				end
	
			end
		end
	})
end
coroutine.wrap(EWAWT_fake_script)()
local function ZZGSSV_fake_script() -- ToggleTest_4.LocalScript 
	local script = Instance.new('LocalScript', ToggleTest_4)

	--[[
		Toggle Animation Script
		
		Instructions:
		1. Create a 'LocalScript' inside your "ToggleTest" frame.
		2. Paste all of this code into that 'LocalScript'.
		3. Your "ToggleTest" frame should contain a background frame (e.g., "Frame 1") 
		   and a TextButton named "Toggle".
		4. That's it! This script works without changing the default AnchorPoint.
	]]
	
	-- Services
	local TweenService = game:GetService("TweenService")
	
	-- UI Elements
	-- This LocalScript should be placed directly inside your "ToggleTest" frame.
	local toggleFrame = script.Parent 
	
	-- This script assumes your background is named "Frame 1" and the button is a TextButton named "Toggle".
	local background = toggleFrame:WaitForChild("Frame 1") -- The background of the switch
	local toggleButton = toggleFrame:WaitForChild("Toggle") -- The part that moves
	
	-- ==================================
	--        CONFIGURATION
	-- ==================================
	
	local TWEEN_DURATION = 0.2 -- How long the animation takes in seconds
	local EasingStyle = Enum.EasingStyle.Quint -- The style of the animation curve (smoothness)
	local EasingDirection = Enum.EasingDirection.Out -- The direction of the animation curve
	
	-- How much space to leave on the left/right of the toggle button. 
	-- 0.05 means 5% of the background's width. Set to 0 for no padding.
	local PADDING_SCALE = 0.05 
	
	-- NEW VARIABLE: Controls how far the button travels across the background.
	-- 1.0 = travels the full available distance.
	-- 0.5 = travels half the available distance.
	-- Set this to a smaller number to reduce how far it moves.
	local TRAVEL_DISTANCE_SCALE = 0.57
	
	-- Colors for ON/OFF states (You can change these RGB values)
	local ON_COLOR = Color3.fromRGB(75, 181, 67)   -- A nice green when ON
	local OFF_COLOR = Color3.fromRGB(57, 57, 57) -- Dark grey when OFF
	
	-- ==================================
	--        SCRIPT LOGIC
	-- ==================================
	
	-- State Variable
	local isToggled = false -- 'false' means it starts in the OFF state
	
	-- Tween Information (This combines the duration and easing settings for the animation)
	local tweenInfo = TweenInfo.new(TWEEN_DURATION, EasingStyle, EasingDirection)
	
	-- Function to update the toggle's visual state based on the 'isToggled' variable
	local function updateToggleState()
		local goalPosition
		local goalColor
	
		-- We read the button's current Y position to avoid messing up your vertical alignment.
		local currentYPosition = toggleButton.Position.Y
	
		-- Define the start and end points of the toggle's path
		local startX = PADDING_SCALE
		local endX = 1 - toggleButton.Size.X.Scale - PADDING_SCALE
	
		-- Calculate the total distance the button can possibly travel
		local travelableDistance = endX - startX
	
		if isToggled then
			-- Set the goals for the "ON" state
			goalColor = ON_COLOR
	
			-- Calculate the final "ON" position based on the travel distance modifier
			local onX = startX + (travelableDistance * TRAVEL_DISTANCE_SCALE)
			goalPosition = UDim2.new(onX, 0, currentYPosition.Scale, currentYPosition.Offset)
		else
			-- Set the goals for the "OFF" state
			goalColor = OFF_COLOR
	
			-- The "OFF" position is the starting position.
			goalPosition = UDim2.new(startX, 0, currentYPosition.Scale, currentYPosition.Offset)
		end
	
		-- Create the animations (Tweens) for position and color
		local positionTween = TweenService:Create(toggleButton, tweenInfo, { Position = goalPosition })
		local colorTween = TweenService:Create(background, tweenInfo, { BackgroundColor3 = goalColor })
	
		-- Play the animations simultaneously
		positionTween:Play()
		colorTween:Play()
	end
	
	-- This function runs whenever the "Toggle" TextButton is clicked
	toggleButton.MouseButton1Click:Connect(function()
		-- Flip the state from on-to-off or off-to-on
		isToggled = not isToggled
	
		-- Run the animation function to update the visuals
		updateToggleState()
	
		-- You can add your other code here to make the toggle actually do something
		if isToggled then
			print(toggleFrame.Name .. " was toggled ON")
			-- Example: game.Workspace.SomePart.Transparency = 0
		else
			print(toggleFrame.Name .. " was toggled OFF")
			-- Example: game.Workspace.SomePart.Transparency = 1
		end
	end)
	
	-- Set the initial visual state to OFF when the game starts or UI loads
	task.wait() -- Add a tiny delay to ensure the UI has loaded its properties correctly
	updateToggleState()
	
end
coroutine.wrap(ZZGSSV_fake_script)()
local function YGDMAU_fake_script() -- MainFrame.tabswitch 
	local script = Instance.new('LocalScript', MainFrame)

	local mainFrame = script.Parent
	local frs = mainFrame:WaitForChild("frs")
	
	local tabs = {
		combat = frs:WaitForChild("combat"),
		home = frs:WaitForChild("home"),
		player = frs:WaitForChild("player"),
		troll = frs:WaitForChild("troll"),
		visuals = frs:WaitForChild("visuals")
	}
	
	local buttons = {
		combatbtn = mainFrame:WaitForChild("combatbtn"),
		homebtn = mainFrame:WaitForChild("homebtn"),
		playerbtn = mainFrame:WaitForChild("playerbtn"),
		trollbtn = mainFrame:WaitForChild("trollbtn"),
		visualsbtn = mainFrame:WaitForChild("visualsbtn")
	}
	
	
	local function hideAllTabs()
		for _, tab in pairs(tabs) do
			tab.Visible = false
		end
	end
	
	
	buttons.combatbtn.MouseButton1Click:Connect(function()
		hideAllTabs()
		tabs.combat.Visible = true
	end)
	
	buttons.homebtn.MouseButton1Click:Connect(function()
		hideAllTabs()
		tabs.home.Visible = true
	end)
	
	buttons.playerbtn.MouseButton1Click:Connect(function()
		hideAllTabs()
		tabs.player.Visible = true
	end)
	
	buttons.trollbtn.MouseButton1Click:Connect(function()
		hideAllTabs()
		tabs.troll.Visible = true
	end)
	
	buttons.visualsbtn.MouseButton1Click:Connect(function()
		hideAllTabs()
		tabs.visuals.Visible = true
	end)
	
	hideAllTabs()
	tabs.home.Visible = true
	
end
coroutine.wrap(YGDMAU_fake_script)()
local function JFOP_fake_script() -- NightmareMM2.PREMIUM 
	local script = Instance.new('LocalScript', NightmareMM2)

	_G.awid38r732rhnfd8332 = false
	
	
	
	-- NOTE: you can add system that will detect subscription and if user is premium do _G.awid38r732rhnfd8332 = true
	--by default it is false(no premium)
	
	--to do only premium function you can use this and put into script start : if _G.awid38r732rhnfd8332 == false then return end
	
end
coroutine.wrap(JFOP_fake_script)()
